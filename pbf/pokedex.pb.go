// Code generated by protoc-gen-gogo.
// source: pokedex.proto
// DO NOT EDIT!

/*
	Package pbf is a generated protocol buffer package.

	It is generated from these files:
		pokedex.proto

	It has these top-level messages:
		Trainer
		Pokemon
		Event
		PokemonList
		Response
		Region
		Token
		Timestamp
*/
package pbf

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gengo/grpc-gateway/third_party/googleapis/google/api"

import strconv "strconv"

import bytes "bytes"

import strings "strings"
import github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"
import sort "sort"
import reflect "reflect"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.GoGoProtoPackageIsVersion1

type Trainer_Gender int32

const (
	BOY  Trainer_Gender = 0
	GIRL Trainer_Gender = 1
)

var Trainer_Gender_name = map[int32]string{
	0: "BOY",
	1: "GIRL",
}
var Trainer_Gender_value = map[string]int32{
	"BOY":  0,
	"GIRL": 1,
}

func (Trainer_Gender) EnumDescriptor() ([]byte, []int) { return fileDescriptorPokedex, []int{0, 0} }

// Pokemon.Type is the canonical type of a pokemon
type Pokemon_Type int32

const (
	UNKNOWN  Pokemon_Type = 0
	NORMAL   Pokemon_Type = 1
	FIGHTING Pokemon_Type = 2
	FLYING   Pokemon_Type = 3
	POISON   Pokemon_Type = 4
	GROUND   Pokemon_Type = 5
	ROCK     Pokemon_Type = 6
	BUG      Pokemon_Type = 7
	GHOST    Pokemon_Type = 8
	STEEL    Pokemon_Type = 9
	FIRE     Pokemon_Type = 10
	WATER    Pokemon_Type = 11
	GRASS    Pokemon_Type = 12
	ELECTRIC Pokemon_Type = 13
	PSYCHIC  Pokemon_Type = 14
	ICE      Pokemon_Type = 15
	DRAGON   Pokemon_Type = 16
	DARK     Pokemon_Type = 17
	FAIRY    Pokemon_Type = 18
)

var Pokemon_Type_name = map[int32]string{
	0:  "UNKNOWN",
	1:  "NORMAL",
	2:  "FIGHTING",
	3:  "FLYING",
	4:  "POISON",
	5:  "GROUND",
	6:  "ROCK",
	7:  "BUG",
	8:  "GHOST",
	9:  "STEEL",
	10: "FIRE",
	11: "WATER",
	12: "GRASS",
	13: "ELECTRIC",
	14: "PSYCHIC",
	15: "ICE",
	16: "DRAGON",
	17: "DARK",
	18: "FAIRY",
}
var Pokemon_Type_value = map[string]int32{
	"UNKNOWN":  0,
	"NORMAL":   1,
	"FIGHTING": 2,
	"FLYING":   3,
	"POISON":   4,
	"GROUND":   5,
	"ROCK":     6,
	"BUG":      7,
	"GHOST":    8,
	"STEEL":    9,
	"FIRE":     10,
	"WATER":    11,
	"GRASS":    12,
	"ELECTRIC": 13,
	"PSYCHIC":  14,
	"ICE":      15,
	"DRAGON":   16,
	"DARK":     17,
	"FAIRY":    18,
}

func (Pokemon_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptorPokedex, []int{1, 0} }

type Region_Code int32

const (
	KANTO  Region_Code = 0
	JOHTO  Region_Code = 1
	HOENN  Region_Code = 2
	SINNOH Region_Code = 3
	UNOVA  Region_Code = 4
	KALOS  Region_Code = 5
	ALOLA  Region_Code = 6
)

var Region_Code_name = map[int32]string{
	0: "KANTO",
	1: "JOHTO",
	2: "HOENN",
	3: "SINNOH",
	4: "UNOVA",
	5: "KALOS",
	6: "ALOLA",
}
var Region_Code_value = map[string]int32{
	"KANTO":  0,
	"JOHTO":  1,
	"HOENN":  2,
	"SINNOH": 3,
	"UNOVA":  4,
	"KALOS":  5,
	"ALOLA":  6,
}

func (Region_Code) EnumDescriptor() ([]byte, []int) { return fileDescriptorPokedex, []int{5, 0} }

type Token_Type int32

const (
	ACCESS Token_Type = 0
)

var Token_Type_name = map[int32]string{
	0: "ACCESS",
}
var Token_Type_value = map[string]int32{
	"ACCESS": 0,
}

func (Token_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptorPokedex, []int{6, 0} }

type Trainer struct {
	Uid      string              `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Name     string              `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Password string              `protobuf:"bytes,3,opt,name=password,proto3" json:"password,omitempty"`
	Age      int32               `protobuf:"varint,4,opt,name=age,proto3" json:"age,omitempty"`
	Gender   Trainer_Gender      `protobuf:"varint,5,opt,name=gender,proto3,enum=pbf.Trainer_Gender" json:"gender,omitempty"`
	Start    *Timestamp          `protobuf:"bytes,6,opt,name=start" json:"start,omitempty"`
	Pc       *Pokemon_Collection `protobuf:"bytes,7,opt,name=pc" json:"pc,omitempty"`
}

func (m *Trainer) Reset()                    { *m = Trainer{} }
func (*Trainer) ProtoMessage()               {}
func (*Trainer) Descriptor() ([]byte, []int) { return fileDescriptorPokedex, []int{0} }

func (m *Trainer) GetStart() *Timestamp {
	if m != nil {
		return m.Start
	}
	return nil
}

func (m *Trainer) GetPc() *Pokemon_Collection {
	if m != nil {
		return m.Pc
	}
	return nil
}

// Pokemon message is info about a pokemon
type Pokemon struct {
	// id is the unique identifier for this individual pokemon
	Uid string `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	// Name is the English name of the pokemon
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Number is the canonical pokemon identifier
	Number int32 `protobuf:"varint,3,opt,name=number,proto3" json:"number,omitempty"`
	// Type is the type of this pokemon
	Type []Pokemon_Type `protobuf:"varint,4,rep,name=type,enum=pbf.Pokemon_Type" json:"type,omitempty"`
	// CatchRate is chance of catching on a scale of 1-255
	CatchRate int32 `protobuf:"varint,5,opt,name=catch_rate,json=catchRate,proto3" json:"catch_rate,omitempty"`
}

func (m *Pokemon) Reset()                    { *m = Pokemon{} }
func (*Pokemon) ProtoMessage()               {}
func (*Pokemon) Descriptor() ([]byte, []int) { return fileDescriptorPokedex, []int{1} }

type Pokemon_Collection struct {
	Pokemon []*Pokemon `protobuf:"bytes,1,rep,name=pokemon" json:"pokemon,omitempty"`
}

func (m *Pokemon_Collection) Reset()                    { *m = Pokemon_Collection{} }
func (*Pokemon_Collection) ProtoMessage()               {}
func (*Pokemon_Collection) Descriptor() ([]byte, []int) { return fileDescriptorPokedex, []int{1, 0} }

func (m *Pokemon_Collection) GetPokemon() []*Pokemon {
	if m != nil {
		return m.Pokemon
	}
	return nil
}

type Event struct {
	Trainer *Trainer   `protobuf:"bytes,1,opt,name=trainer" json:"trainer,omitempty"`
	Pokemon *Pokemon   `protobuf:"bytes,2,opt,name=pokemon" json:"pokemon,omitempty"`
	Region  *Region    `protobuf:"bytes,3,opt,name=region" json:"region,omitempty"`
	Time    *Timestamp `protobuf:"bytes,4,opt,name=time" json:"time,omitempty"`
}

func (m *Event) Reset()                    { *m = Event{} }
func (*Event) ProtoMessage()               {}
func (*Event) Descriptor() ([]byte, []int) { return fileDescriptorPokedex, []int{2} }

func (m *Event) GetTrainer() *Trainer {
	if m != nil {
		return m.Trainer
	}
	return nil
}

func (m *Event) GetPokemon() *Pokemon {
	if m != nil {
		return m.Pokemon
	}
	return nil
}

func (m *Event) GetRegion() *Region {
	if m != nil {
		return m.Region
	}
	return nil
}

func (m *Event) GetTime() *Timestamp {
	if m != nil {
		return m.Time
	}
	return nil
}

type PokemonList struct {
	Pokemon []*Pokemon `protobuf:"bytes,1,rep,name=pokemon" json:"pokemon,omitempty"`
}

func (m *PokemonList) Reset()                    { *m = PokemonList{} }
func (*PokemonList) ProtoMessage()               {}
func (*PokemonList) Descriptor() ([]byte, []int) { return fileDescriptorPokedex, []int{3} }

func (m *PokemonList) GetPokemon() []*Pokemon {
	if m != nil {
		return m.Pokemon
	}
	return nil
}

// Response is a generic message w/ Success, Message & Code
type Response struct {
	Ok   bool   `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	Msg  string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Code int32  `protobuf:"varint,3,opt,name=code,proto3" json:"code,omitempty"`
}

func (m *Response) Reset()                    { *m = Response{} }
func (*Response) ProtoMessage()               {}
func (*Response) Descriptor() ([]byte, []int) { return fileDescriptorPokedex, []int{4} }

type Region struct {
	Code    Region_Code `protobuf:"varint,1,opt,name=code,proto3,enum=pbf.Region_Code" json:"code,omitempty"`
	OptCode int32       `protobuf:"varint,15,opt,name=opt_code,json=optCode,proto3" json:"opt_code,omitempty"`
}

func (m *Region) Reset()                    { *m = Region{} }
func (*Region) ProtoMessage()               {}
func (*Region) Descriptor() ([]byte, []int) { return fileDescriptorPokedex, []int{5} }

type Token struct {
	Token []byte     `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	Type  Token_Type `protobuf:"varint,2,opt,name=type,proto3,enum=pbf.Token_Type" json:"type,omitempty"`
}

func (m *Token) Reset()                    { *m = Token{} }
func (*Token) ProtoMessage()               {}
func (*Token) Descriptor() ([]byte, []int) { return fileDescriptorPokedex, []int{6} }

type Timestamp struct {
	Unix int64 `protobuf:"varint,1,opt,name=unix,proto3" json:"unix,omitempty"`
}

func (m *Timestamp) Reset()                    { *m = Timestamp{} }
func (*Timestamp) ProtoMessage()               {}
func (*Timestamp) Descriptor() ([]byte, []int) { return fileDescriptorPokedex, []int{7} }

func init() {
	proto.RegisterType((*Trainer)(nil), "pbf.Trainer")
	proto.RegisterType((*Pokemon)(nil), "pbf.Pokemon")
	proto.RegisterType((*Pokemon_Collection)(nil), "pbf.Pokemon.Collection")
	proto.RegisterType((*Event)(nil), "pbf.Event")
	proto.RegisterType((*PokemonList)(nil), "pbf.PokemonList")
	proto.RegisterType((*Response)(nil), "pbf.Response")
	proto.RegisterType((*Region)(nil), "pbf.Region")
	proto.RegisterType((*Token)(nil), "pbf.Token")
	proto.RegisterType((*Timestamp)(nil), "pbf.Timestamp")
	proto.RegisterEnum("pbf.Trainer_Gender", Trainer_Gender_name, Trainer_Gender_value)
	proto.RegisterEnum("pbf.Pokemon_Type", Pokemon_Type_name, Pokemon_Type_value)
	proto.RegisterEnum("pbf.Region_Code", Region_Code_name, Region_Code_value)
	proto.RegisterEnum("pbf.Token_Type", Token_Type_name, Token_Type_value)
}
func (x Trainer_Gender) String() string {
	s, ok := Trainer_Gender_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x Pokemon_Type) String() string {
	s, ok := Pokemon_Type_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x Region_Code) String() string {
	s, ok := Region_Code_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x Token_Type) String() string {
	s, ok := Token_Type_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *Trainer) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Trainer)
	if !ok {
		that2, ok := that.(Trainer)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Uid != that1.Uid {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Password != that1.Password {
		return false
	}
	if this.Age != that1.Age {
		return false
	}
	if this.Gender != that1.Gender {
		return false
	}
	if !this.Start.Equal(that1.Start) {
		return false
	}
	if !this.Pc.Equal(that1.Pc) {
		return false
	}
	return true
}
func (this *Pokemon) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Pokemon)
	if !ok {
		that2, ok := that.(Pokemon)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Uid != that1.Uid {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Number != that1.Number {
		return false
	}
	if len(this.Type) != len(that1.Type) {
		return false
	}
	for i := range this.Type {
		if this.Type[i] != that1.Type[i] {
			return false
		}
	}
	if this.CatchRate != that1.CatchRate {
		return false
	}
	return true
}
func (this *Pokemon_Collection) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Pokemon_Collection)
	if !ok {
		that2, ok := that.(Pokemon_Collection)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.Pokemon) != len(that1.Pokemon) {
		return false
	}
	for i := range this.Pokemon {
		if !this.Pokemon[i].Equal(that1.Pokemon[i]) {
			return false
		}
	}
	return true
}
func (this *Event) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Event)
	if !ok {
		that2, ok := that.(Event)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Trainer.Equal(that1.Trainer) {
		return false
	}
	if !this.Pokemon.Equal(that1.Pokemon) {
		return false
	}
	if !this.Region.Equal(that1.Region) {
		return false
	}
	if !this.Time.Equal(that1.Time) {
		return false
	}
	return true
}
func (this *PokemonList) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*PokemonList)
	if !ok {
		that2, ok := that.(PokemonList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.Pokemon) != len(that1.Pokemon) {
		return false
	}
	for i := range this.Pokemon {
		if !this.Pokemon[i].Equal(that1.Pokemon[i]) {
			return false
		}
	}
	return true
}
func (this *Response) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Response)
	if !ok {
		that2, ok := that.(Response)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Ok != that1.Ok {
		return false
	}
	if this.Msg != that1.Msg {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	return true
}
func (this *Region) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Region)
	if !ok {
		that2, ok := that.(Region)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	if this.OptCode != that1.OptCode {
		return false
	}
	return true
}
func (this *Token) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Token)
	if !ok {
		that2, ok := that.(Token)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Token, that1.Token) {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	return true
}
func (this *Timestamp) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Timestamp)
	if !ok {
		that2, ok := that.(Timestamp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Unix != that1.Unix {
		return false
	}
	return true
}
func (this *Trainer) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&pbf.Trainer{")
	s = append(s, "Uid: "+fmt.Sprintf("%#v", this.Uid)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Password: "+fmt.Sprintf("%#v", this.Password)+",\n")
	s = append(s, "Age: "+fmt.Sprintf("%#v", this.Age)+",\n")
	s = append(s, "Gender: "+fmt.Sprintf("%#v", this.Gender)+",\n")
	if this.Start != nil {
		s = append(s, "Start: "+fmt.Sprintf("%#v", this.Start)+",\n")
	}
	if this.Pc != nil {
		s = append(s, "Pc: "+fmt.Sprintf("%#v", this.Pc)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Pokemon) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&pbf.Pokemon{")
	s = append(s, "Uid: "+fmt.Sprintf("%#v", this.Uid)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Number: "+fmt.Sprintf("%#v", this.Number)+",\n")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "CatchRate: "+fmt.Sprintf("%#v", this.CatchRate)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Pokemon_Collection) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pbf.Pokemon_Collection{")
	if this.Pokemon != nil {
		s = append(s, "Pokemon: "+fmt.Sprintf("%#v", this.Pokemon)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Event) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&pbf.Event{")
	if this.Trainer != nil {
		s = append(s, "Trainer: "+fmt.Sprintf("%#v", this.Trainer)+",\n")
	}
	if this.Pokemon != nil {
		s = append(s, "Pokemon: "+fmt.Sprintf("%#v", this.Pokemon)+",\n")
	}
	if this.Region != nil {
		s = append(s, "Region: "+fmt.Sprintf("%#v", this.Region)+",\n")
	}
	if this.Time != nil {
		s = append(s, "Time: "+fmt.Sprintf("%#v", this.Time)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PokemonList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pbf.PokemonList{")
	if this.Pokemon != nil {
		s = append(s, "Pokemon: "+fmt.Sprintf("%#v", this.Pokemon)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Response) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pbf.Response{")
	s = append(s, "Ok: "+fmt.Sprintf("%#v", this.Ok)+",\n")
	s = append(s, "Msg: "+fmt.Sprintf("%#v", this.Msg)+",\n")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Region) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pbf.Region{")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "OptCode: "+fmt.Sprintf("%#v", this.OptCode)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Token) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pbf.Token{")
	s = append(s, "Token: "+fmt.Sprintf("%#v", this.Token)+",\n")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Timestamp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pbf.Timestamp{")
	s = append(s, "Unix: "+fmt.Sprintf("%#v", this.Unix)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringPokedex(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func extensionToGoStringPokedex(e map[int32]github_com_gogo_protobuf_proto.Extension) string {
	if e == nil {
		return "nil"
	}
	s := "map[int32]proto.Extension{"
	keys := make([]int, 0, len(e))
	for k := range e {
		keys = append(keys, int(k))
	}
	sort.Ints(keys)
	ss := []string{}
	for _, k := range keys {
		ss = append(ss, strconv.Itoa(k)+": "+e[int32(k)].GoString())
	}
	s += strings.Join(ss, ",") + "}"
	return s
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for Pokedex service

type PokedexClient interface {
	// GetPokemon method retrieves info about the pokemon at the given number
	//
	// Any other supplied attributes will be ignored
	GetPokemon(ctx context.Context, in *Pokemon, opts ...grpc.CallOption) (*Pokemon_Collection, error)
}

type pokedexClient struct {
	cc *grpc.ClientConn
}

func NewPokedexClient(cc *grpc.ClientConn) PokedexClient {
	return &pokedexClient{cc}
}

func (c *pokedexClient) GetPokemon(ctx context.Context, in *Pokemon, opts ...grpc.CallOption) (*Pokemon_Collection, error) {
	out := new(Pokemon_Collection)
	err := grpc.Invoke(ctx, "/pbf.Pokedex/GetPokemon", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Pokedex service

type PokedexServer interface {
	// GetPokemon method retrieves info about the pokemon at the given number
	//
	// Any other supplied attributes will be ignored
	GetPokemon(context.Context, *Pokemon) (*Pokemon_Collection, error)
}

func RegisterPokedexServer(s *grpc.Server, srv PokedexServer) {
	s.RegisterService(&_Pokedex_serviceDesc, srv)
}

func _Pokedex_GetPokemon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Pokemon)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PokedexServer).GetPokemon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbf.Pokedex/GetPokemon",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PokedexServer).GetPokemon(ctx, req.(*Pokemon))
	}
	return interceptor(ctx, in, info, handler)
}

var _Pokedex_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pbf.Pokedex",
	HandlerType: (*PokedexServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPokemon",
			Handler:    _Pokedex_GetPokemon_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptorPokedex,
}

// Client API for Gameboy service

type GameboyClient interface {
	// Create makes a new trainer
	//
	// Trainer name, password, age & gender are required.
	// Any other supplied fields will be ignored
	Create(ctx context.Context, in *Trainer, opts ...grpc.CallOption) (*Response, error)
	// Get fetchs a trainer
	//
	// The populated fields will depend on the auth scope of the token
	Get(ctx context.Context, in *Trainer, opts ...grpc.CallOption) (*Trainer, error)
	// Authenicate a user to retrieve a an access token to authorize requests
	//
	// HTTPS required w/ HTTP basic access authentication via a header
	// Authorization: Basic BASE64({user:pass})
	Authenticate(ctx context.Context, in *Trainer, opts ...grpc.CallOption) (*Token, error)
	// Encounter might add a pokemon to the event
	//
	// A pokemon will be added to the event and timestmap set if one is encountered
	Encounter(ctx context.Context, in *Event, opts ...grpc.CallOption) (*Event, error)
	// Catch will attempt to catch the pokemon
	//
	// If caught, this pokemon will be deposited into the Trainer's PC
	Catch(ctx context.Context, in *Event, opts ...grpc.CallOption) (*Response, error)
}

type gameboyClient struct {
	cc *grpc.ClientConn
}

func NewGameboyClient(cc *grpc.ClientConn) GameboyClient {
	return &gameboyClient{cc}
}

func (c *gameboyClient) Create(ctx context.Context, in *Trainer, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/pbf.Gameboy/Create", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameboyClient) Get(ctx context.Context, in *Trainer, opts ...grpc.CallOption) (*Trainer, error) {
	out := new(Trainer)
	err := grpc.Invoke(ctx, "/pbf.Gameboy/Get", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameboyClient) Authenticate(ctx context.Context, in *Trainer, opts ...grpc.CallOption) (*Token, error) {
	out := new(Token)
	err := grpc.Invoke(ctx, "/pbf.Gameboy/Authenticate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameboyClient) Encounter(ctx context.Context, in *Event, opts ...grpc.CallOption) (*Event, error) {
	out := new(Event)
	err := grpc.Invoke(ctx, "/pbf.Gameboy/Encounter", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameboyClient) Catch(ctx context.Context, in *Event, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/pbf.Gameboy/Catch", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Gameboy service

type GameboyServer interface {
	// Create makes a new trainer
	//
	// Trainer name, password, age & gender are required.
	// Any other supplied fields will be ignored
	Create(context.Context, *Trainer) (*Response, error)
	// Get fetchs a trainer
	//
	// The populated fields will depend on the auth scope of the token
	Get(context.Context, *Trainer) (*Trainer, error)
	// Authenicate a user to retrieve a an access token to authorize requests
	//
	// HTTPS required w/ HTTP basic access authentication via a header
	// Authorization: Basic BASE64({user:pass})
	Authenticate(context.Context, *Trainer) (*Token, error)
	// Encounter might add a pokemon to the event
	//
	// A pokemon will be added to the event and timestmap set if one is encountered
	Encounter(context.Context, *Event) (*Event, error)
	// Catch will attempt to catch the pokemon
	//
	// If caught, this pokemon will be deposited into the Trainer's PC
	Catch(context.Context, *Event) (*Response, error)
}

func RegisterGameboyServer(s *grpc.Server, srv GameboyServer) {
	s.RegisterService(&_Gameboy_serviceDesc, srv)
}

func _Gameboy_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Trainer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameboyServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbf.Gameboy/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameboyServer).Create(ctx, req.(*Trainer))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gameboy_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Trainer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameboyServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbf.Gameboy/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameboyServer).Get(ctx, req.(*Trainer))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gameboy_Authenticate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Trainer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameboyServer).Authenticate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbf.Gameboy/Authenticate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameboyServer).Authenticate(ctx, req.(*Trainer))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gameboy_Encounter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Event)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameboyServer).Encounter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbf.Gameboy/Encounter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameboyServer).Encounter(ctx, req.(*Event))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gameboy_Catch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Event)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameboyServer).Catch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbf.Gameboy/Catch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameboyServer).Catch(ctx, req.(*Event))
	}
	return interceptor(ctx, in, info, handler)
}

var _Gameboy_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pbf.Gameboy",
	HandlerType: (*GameboyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Gameboy_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _Gameboy_Get_Handler,
		},
		{
			MethodName: "Authenticate",
			Handler:    _Gameboy_Authenticate_Handler,
		},
		{
			MethodName: "Encounter",
			Handler:    _Gameboy_Encounter_Handler,
		},
		{
			MethodName: "Catch",
			Handler:    _Gameboy_Catch_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptorPokedex,
}

func (m *Trainer) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Trainer) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Uid) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintPokedex(data, i, uint64(len(m.Uid)))
		i += copy(data[i:], m.Uid)
	}
	if len(m.Name) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintPokedex(data, i, uint64(len(m.Name)))
		i += copy(data[i:], m.Name)
	}
	if len(m.Password) > 0 {
		data[i] = 0x1a
		i++
		i = encodeVarintPokedex(data, i, uint64(len(m.Password)))
		i += copy(data[i:], m.Password)
	}
	if m.Age != 0 {
		data[i] = 0x20
		i++
		i = encodeVarintPokedex(data, i, uint64(m.Age))
	}
	if m.Gender != 0 {
		data[i] = 0x28
		i++
		i = encodeVarintPokedex(data, i, uint64(m.Gender))
	}
	if m.Start != nil {
		data[i] = 0x32
		i++
		i = encodeVarintPokedex(data, i, uint64(m.Start.Size()))
		n1, err := m.Start.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.Pc != nil {
		data[i] = 0x3a
		i++
		i = encodeVarintPokedex(data, i, uint64(m.Pc.Size()))
		n2, err := m.Pc.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func (m *Pokemon) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Pokemon) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Uid) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintPokedex(data, i, uint64(len(m.Uid)))
		i += copy(data[i:], m.Uid)
	}
	if len(m.Name) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintPokedex(data, i, uint64(len(m.Name)))
		i += copy(data[i:], m.Name)
	}
	if m.Number != 0 {
		data[i] = 0x18
		i++
		i = encodeVarintPokedex(data, i, uint64(m.Number))
	}
	if len(m.Type) > 0 {
		for _, num := range m.Type {
			data[i] = 0x20
			i++
			i = encodeVarintPokedex(data, i, uint64(num))
		}
	}
	if m.CatchRate != 0 {
		data[i] = 0x28
		i++
		i = encodeVarintPokedex(data, i, uint64(m.CatchRate))
	}
	return i, nil
}

func (m *Pokemon_Collection) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Pokemon_Collection) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Pokemon) > 0 {
		for _, msg := range m.Pokemon {
			data[i] = 0xa
			i++
			i = encodeVarintPokedex(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *Event) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Event) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Trainer != nil {
		data[i] = 0xa
		i++
		i = encodeVarintPokedex(data, i, uint64(m.Trainer.Size()))
		n3, err := m.Trainer.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.Pokemon != nil {
		data[i] = 0x12
		i++
		i = encodeVarintPokedex(data, i, uint64(m.Pokemon.Size()))
		n4, err := m.Pokemon.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.Region != nil {
		data[i] = 0x1a
		i++
		i = encodeVarintPokedex(data, i, uint64(m.Region.Size()))
		n5, err := m.Region.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if m.Time != nil {
		data[i] = 0x22
		i++
		i = encodeVarintPokedex(data, i, uint64(m.Time.Size()))
		n6, err := m.Time.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	return i, nil
}

func (m *PokemonList) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *PokemonList) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Pokemon) > 0 {
		for _, msg := range m.Pokemon {
			data[i] = 0xa
			i++
			i = encodeVarintPokedex(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *Response) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Response) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Ok {
		data[i] = 0x8
		i++
		if m.Ok {
			data[i] = 1
		} else {
			data[i] = 0
		}
		i++
	}
	if len(m.Msg) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintPokedex(data, i, uint64(len(m.Msg)))
		i += copy(data[i:], m.Msg)
	}
	if m.Code != 0 {
		data[i] = 0x18
		i++
		i = encodeVarintPokedex(data, i, uint64(m.Code))
	}
	return i, nil
}

func (m *Region) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Region) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		data[i] = 0x8
		i++
		i = encodeVarintPokedex(data, i, uint64(m.Code))
	}
	if m.OptCode != 0 {
		data[i] = 0x78
		i++
		i = encodeVarintPokedex(data, i, uint64(m.OptCode))
	}
	return i, nil
}

func (m *Token) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Token) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Token) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintPokedex(data, i, uint64(len(m.Token)))
		i += copy(data[i:], m.Token)
	}
	if m.Type != 0 {
		data[i] = 0x10
		i++
		i = encodeVarintPokedex(data, i, uint64(m.Type))
	}
	return i, nil
}

func (m *Timestamp) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Timestamp) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Unix != 0 {
		data[i] = 0x8
		i++
		i = encodeVarintPokedex(data, i, uint64(m.Unix))
	}
	return i, nil
}

func encodeFixed64Pokedex(data []byte, offset int, v uint64) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	data[offset+4] = uint8(v >> 32)
	data[offset+5] = uint8(v >> 40)
	data[offset+6] = uint8(v >> 48)
	data[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Pokedex(data []byte, offset int, v uint32) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintPokedex(data []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		data[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	data[offset] = uint8(v)
	return offset + 1
}
func (m *Trainer) Size() (n int) {
	var l int
	_ = l
	l = len(m.Uid)
	if l > 0 {
		n += 1 + l + sovPokedex(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovPokedex(uint64(l))
	}
	l = len(m.Password)
	if l > 0 {
		n += 1 + l + sovPokedex(uint64(l))
	}
	if m.Age != 0 {
		n += 1 + sovPokedex(uint64(m.Age))
	}
	if m.Gender != 0 {
		n += 1 + sovPokedex(uint64(m.Gender))
	}
	if m.Start != nil {
		l = m.Start.Size()
		n += 1 + l + sovPokedex(uint64(l))
	}
	if m.Pc != nil {
		l = m.Pc.Size()
		n += 1 + l + sovPokedex(uint64(l))
	}
	return n
}

func (m *Pokemon) Size() (n int) {
	var l int
	_ = l
	l = len(m.Uid)
	if l > 0 {
		n += 1 + l + sovPokedex(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovPokedex(uint64(l))
	}
	if m.Number != 0 {
		n += 1 + sovPokedex(uint64(m.Number))
	}
	if len(m.Type) > 0 {
		for _, e := range m.Type {
			n += 1 + sovPokedex(uint64(e))
		}
	}
	if m.CatchRate != 0 {
		n += 1 + sovPokedex(uint64(m.CatchRate))
	}
	return n
}

func (m *Pokemon_Collection) Size() (n int) {
	var l int
	_ = l
	if len(m.Pokemon) > 0 {
		for _, e := range m.Pokemon {
			l = e.Size()
			n += 1 + l + sovPokedex(uint64(l))
		}
	}
	return n
}

func (m *Event) Size() (n int) {
	var l int
	_ = l
	if m.Trainer != nil {
		l = m.Trainer.Size()
		n += 1 + l + sovPokedex(uint64(l))
	}
	if m.Pokemon != nil {
		l = m.Pokemon.Size()
		n += 1 + l + sovPokedex(uint64(l))
	}
	if m.Region != nil {
		l = m.Region.Size()
		n += 1 + l + sovPokedex(uint64(l))
	}
	if m.Time != nil {
		l = m.Time.Size()
		n += 1 + l + sovPokedex(uint64(l))
	}
	return n
}

func (m *PokemonList) Size() (n int) {
	var l int
	_ = l
	if len(m.Pokemon) > 0 {
		for _, e := range m.Pokemon {
			l = e.Size()
			n += 1 + l + sovPokedex(uint64(l))
		}
	}
	return n
}

func (m *Response) Size() (n int) {
	var l int
	_ = l
	if m.Ok {
		n += 2
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovPokedex(uint64(l))
	}
	if m.Code != 0 {
		n += 1 + sovPokedex(uint64(m.Code))
	}
	return n
}

func (m *Region) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovPokedex(uint64(m.Code))
	}
	if m.OptCode != 0 {
		n += 1 + sovPokedex(uint64(m.OptCode))
	}
	return n
}

func (m *Token) Size() (n int) {
	var l int
	_ = l
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovPokedex(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovPokedex(uint64(m.Type))
	}
	return n
}

func (m *Timestamp) Size() (n int) {
	var l int
	_ = l
	if m.Unix != 0 {
		n += 1 + sovPokedex(uint64(m.Unix))
	}
	return n
}

func sovPokedex(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozPokedex(x uint64) (n int) {
	return sovPokedex(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Trainer) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Trainer{`,
		`Uid:` + fmt.Sprintf("%v", this.Uid) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Password:` + fmt.Sprintf("%v", this.Password) + `,`,
		`Age:` + fmt.Sprintf("%v", this.Age) + `,`,
		`Gender:` + fmt.Sprintf("%v", this.Gender) + `,`,
		`Start:` + strings.Replace(fmt.Sprintf("%v", this.Start), "Timestamp", "Timestamp", 1) + `,`,
		`Pc:` + strings.Replace(fmt.Sprintf("%v", this.Pc), "Pokemon_Collection", "Pokemon_Collection", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Pokemon) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Pokemon{`,
		`Uid:` + fmt.Sprintf("%v", this.Uid) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Number:` + fmt.Sprintf("%v", this.Number) + `,`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`CatchRate:` + fmt.Sprintf("%v", this.CatchRate) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Pokemon_Collection) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Pokemon_Collection{`,
		`Pokemon:` + strings.Replace(fmt.Sprintf("%v", this.Pokemon), "Pokemon", "Pokemon", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Event) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Event{`,
		`Trainer:` + strings.Replace(fmt.Sprintf("%v", this.Trainer), "Trainer", "Trainer", 1) + `,`,
		`Pokemon:` + strings.Replace(fmt.Sprintf("%v", this.Pokemon), "Pokemon", "Pokemon", 1) + `,`,
		`Region:` + strings.Replace(fmt.Sprintf("%v", this.Region), "Region", "Region", 1) + `,`,
		`Time:` + strings.Replace(fmt.Sprintf("%v", this.Time), "Timestamp", "Timestamp", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PokemonList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PokemonList{`,
		`Pokemon:` + strings.Replace(fmt.Sprintf("%v", this.Pokemon), "Pokemon", "Pokemon", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Response) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Response{`,
		`Ok:` + fmt.Sprintf("%v", this.Ok) + `,`,
		`Msg:` + fmt.Sprintf("%v", this.Msg) + `,`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Region) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Region{`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`OptCode:` + fmt.Sprintf("%v", this.OptCode) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Token) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Token{`,
		`Token:` + fmt.Sprintf("%v", this.Token) + `,`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Timestamp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Timestamp{`,
		`Unix:` + fmt.Sprintf("%v", this.Unix) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringPokedex(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Trainer) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPokedex
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Trainer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Trainer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPokedex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPokedex
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uid = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPokedex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPokedex
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Password", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPokedex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPokedex
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Password = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Age", wireType)
			}
			m.Age = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPokedex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Age |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gender", wireType)
			}
			m.Gender = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPokedex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Gender |= (Trainer_Gender(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Start", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPokedex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPokedex
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Start == nil {
				m.Start = &Timestamp{}
			}
			if err := m.Start.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pc", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPokedex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPokedex
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pc == nil {
				m.Pc = &Pokemon_Collection{}
			}
			if err := m.Pc.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPokedex(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPokedex
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Pokemon) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPokedex
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Pokemon: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Pokemon: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPokedex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPokedex
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uid = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPokedex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPokedex
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Number", wireType)
			}
			m.Number = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPokedex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Number |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var v Pokemon_Type
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPokedex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (Pokemon_Type(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Type = append(m.Type, v)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CatchRate", wireType)
			}
			m.CatchRate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPokedex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.CatchRate |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPokedex(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPokedex
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Pokemon_Collection) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPokedex
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Collection: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Collection: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pokemon", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPokedex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPokedex
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pokemon = append(m.Pokemon, &Pokemon{})
			if err := m.Pokemon[len(m.Pokemon)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPokedex(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPokedex
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Event) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPokedex
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Event: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Event: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Trainer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPokedex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPokedex
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Trainer == nil {
				m.Trainer = &Trainer{}
			}
			if err := m.Trainer.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pokemon", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPokedex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPokedex
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pokemon == nil {
				m.Pokemon = &Pokemon{}
			}
			if err := m.Pokemon.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Region", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPokedex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPokedex
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Region == nil {
				m.Region = &Region{}
			}
			if err := m.Region.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPokedex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPokedex
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Time == nil {
				m.Time = &Timestamp{}
			}
			if err := m.Time.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPokedex(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPokedex
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PokemonList) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPokedex
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PokemonList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PokemonList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pokemon", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPokedex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPokedex
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pokemon = append(m.Pokemon, &Pokemon{})
			if err := m.Pokemon[len(m.Pokemon)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPokedex(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPokedex
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Response) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPokedex
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Response: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Response: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ok", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPokedex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ok = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPokedex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPokedex
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPokedex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Code |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPokedex(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPokedex
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Region) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPokedex
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Region: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Region: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPokedex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Code |= (Region_Code(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OptCode", wireType)
			}
			m.OptCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPokedex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.OptCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPokedex(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPokedex
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Token) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPokedex
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Token: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Token: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPokedex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPokedex
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = append(m.Token[:0], data[iNdEx:postIndex]...)
			if m.Token == nil {
				m.Token = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPokedex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Type |= (Token_Type(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPokedex(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPokedex
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Timestamp) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPokedex
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Timestamp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Timestamp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Unix", wireType)
			}
			m.Unix = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPokedex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Unix |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPokedex(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPokedex
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPokedex(data []byte) (n int, err error) {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPokedex
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPokedex
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if data[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPokedex
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthPokedex
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowPokedex
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipPokedex(data[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthPokedex = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPokedex   = fmt.Errorf("proto: integer overflow")
)

var fileDescriptorPokedex = []byte{
	// 1009 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x8c, 0x55, 0x4f, 0x8f, 0xdb, 0x44,
	0x14, 0x5f, 0xc7, 0xb1, 0x93, 0xbc, 0xec, 0x9f, 0xd9, 0x59, 0x28, 0x69, 0x0a, 0x0b, 0x32, 0x7f,
	0x05, 0x55, 0x22, 0x42, 0x11, 0xa2, 0x27, 0x5c, 0xaf, 0xd7, 0x09, 0x1b, 0xec, 0xd5, 0xc4, 0xdb,
	0x12, 0x09, 0xa9, 0xf2, 0x26, 0x43, 0x1a, 0x75, 0x63, 0x5b, 0x89, 0x03, 0xad, 0x56, 0x2b, 0x21,
	0x3e, 0x01, 0x12, 0x1f, 0x00, 0x2e, 0x48, 0x7c, 0x14, 0x8e, 0x95, 0xb8, 0x70, 0x83, 0x16, 0x0e,
	0x1c, 0x39, 0x71, 0x85, 0x37, 0x33, 0xce, 0x6e, 0xb2, 0x55, 0xa5, 0x1e, 0x46, 0xfe, 0xcd, 0x7b,
	0x6f, 0xde, 0xbc, 0x3f, 0xbf, 0x37, 0x86, 0x8d, 0x34, 0xb9, 0xcf, 0x87, 0xfc, 0x41, 0x23, 0x9d,
	0x26, 0x59, 0x42, 0xf5, 0xf4, 0xf8, 0xcb, 0xfa, 0xcb, 0xa3, 0x24, 0x19, 0x9d, 0xf0, 0x66, 0x94,
	0x8e, 0x9b, 0x51, 0x1c, 0x27, 0x59, 0x94, 0x8d, 0x93, 0x78, 0xa6, 0x4c, 0xac, 0x7f, 0x35, 0x28,
	0x85, 0xd3, 0x68, 0x1c, 0xf3, 0x29, 0x25, 0xa0, 0xcf, 0xc7, 0xc3, 0x9a, 0xf6, 0x9a, 0xf6, 0x4e,
	0x85, 0x09, 0x48, 0x29, 0x14, 0xe3, 0x68, 0xc2, 0x6b, 0x05, 0x29, 0x92, 0x98, 0xd6, 0xa1, 0x9c,
	0x46, 0xb3, 0xd9, 0xd7, 0xc9, 0x74, 0x58, 0xd3, 0xa5, 0xfc, 0x7c, 0x2f, 0x3c, 0x44, 0x23, 0x5e,
	0x2b, 0xa2, 0xd8, 0x60, 0x02, 0xd2, 0xf7, 0xc0, 0x1c, 0xf1, 0x78, 0xc8, 0xa7, 0x35, 0x03, 0x85,
	0x9b, 0xad, 0x9d, 0x06, 0xc6, 0xd4, 0xc8, 0x6f, 0x6c, 0x78, 0x52, 0xc5, 0x72, 0x13, 0xfa, 0x06,
	0x18, 0xb3, 0x2c, 0x9a, 0x66, 0x35, 0x13, 0x6d, 0xab, 0xad, 0x4d, 0x65, 0x3b, 0x9e, 0x70, 0x94,
	0x4e, 0x52, 0xa6, 0x94, 0xf4, 0x6d, 0x28, 0xa4, 0x83, 0x5a, 0x49, 0x9a, 0xbc, 0x24, 0x4d, 0x0e,
	0x31, 0xeb, 0x49, 0x12, 0x37, 0x9c, 0xe4, 0xe4, 0x84, 0x0f, 0x44, 0x7a, 0x0c, 0x4d, 0xac, 0x6b,
	0x60, 0xaa, 0x0b, 0x68, 0x09, 0xf4, 0x5b, 0x41, 0x9f, 0xac, 0xd1, 0x32, 0x14, 0xbd, 0x0e, 0xeb,
	0x12, 0xcd, 0xfa, 0x49, 0x87, 0x52, 0x7e, 0xee, 0x39, 0x13, 0xbf, 0x02, 0x66, 0x3c, 0x9f, 0x1c,
	0x63, 0x2a, 0xba, 0xcc, 0x2f, 0xdf, 0xd1, 0x37, 0xa1, 0x98, 0x3d, 0x4c, 0x45, 0xd6, 0x3a, 0x26,
	0xb8, 0xbd, 0x12, 0x51, 0x88, 0x0a, 0x26, 0xd5, 0xf4, 0x15, 0x80, 0x41, 0x94, 0x0d, 0xee, 0xdd,
	0x9d, 0x46, 0x19, 0x97, 0xd5, 0x30, 0x58, 0x45, 0x4a, 0x18, 0x0a, 0xea, 0x37, 0x00, 0x2e, 0xc2,
	0xa7, 0x6f, 0x41, 0x29, 0x55, 0x2e, 0x30, 0x2a, 0x1d, 0x13, 0x5d, 0x5f, 0x76, 0xcb, 0x16, 0x4a,
	0xeb, 0x77, 0x0d, 0x8a, 0xe2, 0x0e, 0x5a, 0x85, 0xd2, 0x91, 0x7f, 0xe0, 0x07, 0x77, 0x7c, 0xcc,
	0x12, 0xc0, 0xf4, 0x03, 0xf6, 0x99, 0x8d, 0x79, 0xd2, 0x75, 0x28, 0xef, 0x77, 0xbc, 0x76, 0xd8,
	0xf1, 0x3d, 0x52, 0x10, 0x9a, 0xfd, 0x6e, 0x5f, 0x60, 0x5d, 0xe0, 0xc3, 0xa0, 0xd3, 0x0b, 0x7c,
	0x52, 0x14, 0xd8, 0x63, 0xc1, 0x91, 0xbf, 0x47, 0x0c, 0x51, 0x23, 0x16, 0x38, 0x07, 0xc4, 0x94,
	0x65, 0x3b, 0xf2, 0x48, 0x89, 0x56, 0xc0, 0xf0, 0xda, 0x41, 0x2f, 0x24, 0x65, 0x01, 0x7b, 0xa1,
	0xeb, 0x76, 0x49, 0x45, 0x18, 0xee, 0x77, 0x98, 0x4b, 0x40, 0x08, 0xef, 0xd8, 0xa1, 0xcb, 0x48,
	0x55, 0x9a, 0x32, 0xbb, 0xd7, 0x23, 0xeb, 0xe2, 0x6a, 0xb7, 0xeb, 0x3a, 0x21, 0xeb, 0x38, 0x64,
	0x43, 0x44, 0x78, 0xd8, 0xeb, 0x3b, 0x6d, 0xdc, 0x6c, 0x0a, 0xcf, 0x1d, 0xc7, 0x25, 0x5b, 0xe2,
	0xe2, 0x3d, 0x66, 0x7b, 0x18, 0x04, 0x11, 0xfe, 0xf6, 0x6c, 0x76, 0x40, 0xb6, 0x85, 0x93, 0x7d,
	0xbb, 0xc3, 0xfa, 0x84, 0x5a, 0x3f, 0x6a, 0x60, 0xb8, 0x5f, 0xf1, 0x38, 0x13, 0x35, 0xc9, 0x14,
	0x6f, 0x64, 0xa7, 0x16, 0x35, 0xc9, 0xb9, 0xc4, 0x16, 0xca, 0xe5, 0xda, 0x15, 0x96, 0xec, 0x2e,
	0xd7, 0x8e, 0xbe, 0x0e, 0xe6, 0x94, 0x8f, 0xb0, 0xda, 0xb2, 0x9f, 0xd5, 0x56, 0x55, 0x9a, 0x31,
	0x29, 0x62, 0xb9, 0x8a, 0x5a, 0xd8, 0x5c, 0x24, 0xa0, 0xa4, 0xf4, 0xd3, 0x8c, 0x94, 0x3a, 0xeb,
	0x43, 0xa8, 0xe6, 0xce, 0xbb, 0xe3, 0x59, 0xf6, 0xdc, 0xbd, 0xfb, 0x04, 0xca, 0x8c, 0xcf, 0x52,
	0x9c, 0x45, 0x4e, 0x37, 0xa1, 0x90, 0xdc, 0x97, 0x69, 0x95, 0x19, 0x22, 0xc1, 0xc8, 0xc9, 0x6c,
	0x94, 0xd3, 0x4f, 0x40, 0xc1, 0xc8, 0x41, 0x32, 0xe4, 0x39, 0xf7, 0x24, 0xb6, 0x7e, 0xd0, 0xc0,
	0x54, 0xf1, 0xe2, 0xe8, 0x28, 0xb5, 0x26, 0xa7, 0x8c, 0x2c, 0xa5, 0x82, 0x53, 0x31, 0xe4, 0xea,
	0x00, 0xbd, 0x0a, 0xe5, 0x24, 0xcd, 0xee, 0x4a, 0xcb, 0x2d, 0xe9, 0xa8, 0x84, 0x7b, 0x61, 0x60,
	0x85, 0x50, 0x14, 0x5f, 0x51, 0xfa, 0x03, 0xdb, 0x0f, 0x03, 0xa4, 0x11, 0xc2, 0x4f, 0x83, 0x36,
	0x42, 0x4d, 0xc0, 0x76, 0xe0, 0xfa, 0xbe, 0xa2, 0x50, 0xaf, 0xe3, 0xfb, 0x41, 0x1b, 0x29, 0x84,
	0xe2, 0x23, 0x3f, 0xb8, 0x6d, 0x23, 0x83, 0xe4, 0xb9, 0x6e, 0xd0, 0x43, 0x02, 0x21, 0x44, 0xd4,
	0xb5, 0x89, 0x69, 0xdd, 0x06, 0x23, 0xc4, 0x74, 0x63, 0xfa, 0x02, 0x18, 0x99, 0x00, 0x32, 0xc0,
	0x75, 0xa6, 0x36, 0xd8, 0x02, 0x35, 0x3a, 0x05, 0x19, 0xf5, 0x96, 0xaa, 0xae, 0xd0, 0x2c, 0x0d,
	0x8e, 0x45, 0x73, 0x8a, 0xe3, 0xc5, 0xb6, 0xe3, 0xb8, 0x48, 0xad, 0x35, 0xeb, 0x55, 0xa8, 0x9c,
	0x77, 0x41, 0x94, 0x66, 0x1e, 0x8f, 0x1f, 0x48, 0xd7, 0x3a, 0x93, 0xb8, 0xd5, 0x57, 0xd3, 0x8d,
	0x6f, 0x21, 0xf5, 0x01, 0x3c, 0x9e, 0x2d, 0x66, 0x7d, 0xa5, 0x19, 0xf5, 0x67, 0xbd, 0x1f, 0xd6,
	0xd5, 0x6f, 0x7f, 0xfd, 0xeb, 0xfb, 0xc2, 0x0e, 0xdd, 0x6e, 0xe6, 0xed, 0x6a, 0x9e, 0xaa, 0x71,
	0x3f, 0x6b, 0xfd, 0x57, 0x80, 0x92, 0x87, 0x0f, 0xc2, 0x71, 0xf2, 0x90, 0xde, 0x04, 0xd3, 0x99,
	0x72, 0x9c, 0x5f, 0xba, 0x42, 0xc6, 0xfa, 0x46, 0xde, 0x00, 0xd5, 0x5e, 0x6b, 0x47, 0x7a, 0xdb,
	0xb0, 0xca, 0xcd, 0x9c, 0xa4, 0x37, 0xb5, 0x77, 0xe9, 0xc7, 0xa0, 0x63, 0x5c, 0x97, 0x0e, 0xae,
	0xec, 0xac, 0x2b, 0xf2, 0x1c, 0xa1, 0x9b, 0x8b, 0x73, 0xcd, 0x53, 0x7c, 0x9d, 0xce, 0xa8, 0x0b,
	0xeb, 0xf6, 0x3c, 0xbb, 0x87, 0x53, 0x31, 0x1e, 0x3c, 0x7d, 0x39, 0x5c, 0xd4, 0xd1, 0xba, 0x26,
	0x3d, 0xbc, 0x48, 0x77, 0x56, 0x3d, 0x34, 0x23, 0x3c, 0x4e, 0xbf, 0x80, 0x8a, 0x1b, 0x0f, 0x92,
	0x79, 0x9c, 0xe1, 0xd8, 0xa8, 0x53, 0x72, 0xd4, 0xea, 0x4b, 0xd8, 0xfa, 0x48, 0x7a, 0x78, 0x9f,
	0x36, 0x2f, 0x3c, 0xe4, 0xa0, 0x21, 0x3d, 0xa9, 0x41, 0x69, 0x9e, 0xaa, 0x6f, 0x63, 0xc1, 0xaf,
	0x33, 0xfa, 0x39, 0x18, 0x8e, 0x78, 0xde, 0x56, 0x3c, 0x5f, 0x2a, 0xcc, 0x0d, 0xe9, 0xbc, 0x61,
	0x5d, 0x7f, 0x86, 0xf3, 0xf3, 0xe2, 0xe7, 0x40, 0x4a, 0x6f, 0x5d, 0x7f, 0xf4, 0x78, 0x77, 0xed,
	0x37, 0x5c, 0xff, 0x3c, 0xde, 0xd5, 0xbe, 0x79, 0xb2, 0xab, 0xfd, 0x8c, 0xeb, 0x17, 0x5c, 0x8f,
	0x70, 0xfd, 0x81, 0xeb, 0xef, 0x27, 0xa8, 0xc3, 0xef, 0x77, 0x7f, 0xee, 0xae, 0x1d, 0x9b, 0xf2,
	0x4f, 0xf7, 0xc1, 0xff, 0x01, 0x00, 0x00, 0xff, 0xff, 0x77, 0x1e, 0x8e, 0x8c, 0x1d, 0x07, 0x00,
	0x00,
}
