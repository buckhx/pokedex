// Code generated by protoc-gen-gogo.
// source: zone.proto
// DO NOT EDIT!

package pbf

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gengo/grpc-gateway/third_party/googleapis/google/api"

import strconv "strconv"

import strings "strings"
import github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"
import sort "sort"
import reflect "reflect"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type ZoneScope int32

const (
	ZONE_READ  ZoneScope = 0
	ZONE_WRITE ZoneScope = 1
	ZONE_ADMIN ZoneScope = 2
)

var ZoneScope_name = map[int32]string{
	0: "ZONE_READ",
	1: "ZONE_WRITE",
	2: "ZONE_ADMIN",
}
var ZoneScope_value = map[string]int32{
	"ZONE_READ":  0,
	"ZONE_WRITE": 1,
	"ZONE_ADMIN": 2,
}

func (ZoneScope) EnumDescriptor() ([]byte, []int) { return fileDescriptorZone, []int{0} }

type Region_Code int32

const (
	KANTO  Region_Code = 0
	JOHTO  Region_Code = 1
	HOENN  Region_Code = 2
	SINNOH Region_Code = 3
	UNOVA  Region_Code = 4
	KALOS  Region_Code = 5
	ALOLA  Region_Code = 6
)

var Region_Code_name = map[int32]string{
	0: "KANTO",
	1: "JOHTO",
	2: "HOENN",
	3: "SINNOH",
	4: "UNOVA",
	5: "KALOS",
	6: "ALOLA",
}
var Region_Code_value = map[string]int32{
	"KANTO":  0,
	"JOHTO":  1,
	"HOENN":  2,
	"SINNOH": 3,
	"UNOVA":  4,
	"KALOS":  5,
	"ALOLA":  6,
}

func (Region_Code) EnumDescriptor() ([]byte, []int) { return fileDescriptorZone, []int{1, 0} }

type Event struct {
	Trainer *Trainer   `protobuf:"bytes,1,opt,name=trainer" json:"trainer,omitempty"`
	Pokemon *Pokemon   `protobuf:"bytes,2,opt,name=pokemon" json:"pokemon,omitempty"`
	Region  *Region    `protobuf:"bytes,3,opt,name=region" json:"region,omitempty"`
	Time    *Timestamp `protobuf:"bytes,4,opt,name=time" json:"time,omitempty"`
}

func (m *Event) Reset()                    { *m = Event{} }
func (*Event) ProtoMessage()               {}
func (*Event) Descriptor() ([]byte, []int) { return fileDescriptorZone, []int{0} }

func (m *Event) GetTrainer() *Trainer {
	if m != nil {
		return m.Trainer
	}
	return nil
}

func (m *Event) GetPokemon() *Pokemon {
	if m != nil {
		return m.Pokemon
	}
	return nil
}

func (m *Event) GetRegion() *Region {
	if m != nil {
		return m.Region
	}
	return nil
}

func (m *Event) GetTime() *Timestamp {
	if m != nil {
		return m.Time
	}
	return nil
}

type Region struct {
	Code    Region_Code `protobuf:"varint,1,opt,name=code,proto3,enum=buckhx.safari.zone.Region_Code" json:"code,omitempty"`
	OptCode int32       `protobuf:"varint,15,opt,name=opt_code,json=optCode,proto3" json:"opt_code,omitempty"`
}

func (m *Region) Reset()                    { *m = Region{} }
func (*Region) ProtoMessage()               {}
func (*Region) Descriptor() ([]byte, []int) { return fileDescriptorZone, []int{1} }

func init() {
	proto.RegisterType((*Event)(nil), "buckhx.safari.zone.Event")
	proto.RegisterType((*Region)(nil), "buckhx.safari.zone.Region")
	proto.RegisterEnum("buckhx.safari.zone.ZoneScope", ZoneScope_name, ZoneScope_value)
	proto.RegisterEnum("buckhx.safari.zone.Region_Code", Region_Code_name, Region_Code_value)
}
func (x ZoneScope) String() string {
	s, ok := ZoneScope_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x Region_Code) String() string {
	s, ok := Region_Code_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *Event) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Event)
	if !ok {
		that2, ok := that.(Event)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Trainer.Equal(that1.Trainer) {
		return false
	}
	if !this.Pokemon.Equal(that1.Pokemon) {
		return false
	}
	if !this.Region.Equal(that1.Region) {
		return false
	}
	if !this.Time.Equal(that1.Time) {
		return false
	}
	return true
}
func (this *Region) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Region)
	if !ok {
		that2, ok := that.(Region)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	if this.OptCode != that1.OptCode {
		return false
	}
	return true
}
func (this *Event) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&pbf.Event{")
	if this.Trainer != nil {
		s = append(s, "Trainer: "+fmt.Sprintf("%#v", this.Trainer)+",\n")
	}
	if this.Pokemon != nil {
		s = append(s, "Pokemon: "+fmt.Sprintf("%#v", this.Pokemon)+",\n")
	}
	if this.Region != nil {
		s = append(s, "Region: "+fmt.Sprintf("%#v", this.Region)+",\n")
	}
	if this.Time != nil {
		s = append(s, "Time: "+fmt.Sprintf("%#v", this.Time)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Region) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pbf.Region{")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "OptCode: "+fmt.Sprintf("%#v", this.OptCode)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringZone(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func extensionToGoStringZone(e map[int32]github_com_gogo_protobuf_proto.Extension) string {
	if e == nil {
		return "nil"
	}
	s := "map[int32]proto.Extension{"
	keys := make([]int, 0, len(e))
	for k := range e {
		keys = append(keys, int(k))
	}
	sort.Ints(keys)
	ss := []string{}
	for _, k := range keys {
		ss = append(ss, strconv.Itoa(k)+": "+e[int32(k)].GoString())
	}
	s += strings.Join(ss, ",") + "}"
	return s
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for Zone service

type ZoneClient interface {
	// Encounter might add a pokemon to the event
	//
	// A pokemon will be added to the event and timestmap set if one is encountered
	Encounter(ctx context.Context, in *Event, opts ...grpc.CallOption) (*Event, error)
	// Catch will attempt to catch the pokemon
	//
	// If caught, this pokemon will be deposited into the Trainer's PC
	Catch(ctx context.Context, in *Event, opts ...grpc.CallOption) (*Response, error)
}

type zoneClient struct {
	cc *grpc.ClientConn
}

func NewZoneClient(cc *grpc.ClientConn) ZoneClient {
	return &zoneClient{cc}
}

func (c *zoneClient) Encounter(ctx context.Context, in *Event, opts ...grpc.CallOption) (*Event, error) {
	out := new(Event)
	err := grpc.Invoke(ctx, "/buckhx.safari.zone.Zone/Encounter", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zoneClient) Catch(ctx context.Context, in *Event, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/buckhx.safari.zone.Zone/Catch", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Zone service

type ZoneServer interface {
	// Encounter might add a pokemon to the event
	//
	// A pokemon will be added to the event and timestmap set if one is encountered
	Encounter(context.Context, *Event) (*Event, error)
	// Catch will attempt to catch the pokemon
	//
	// If caught, this pokemon will be deposited into the Trainer's PC
	Catch(context.Context, *Event) (*Response, error)
}

func RegisterZoneServer(s *grpc.Server, srv ZoneServer) {
	s.RegisterService(&_Zone_serviceDesc, srv)
}

func _Zone_Encounter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Event)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZoneServer).Encounter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/buckhx.safari.zone.Zone/Encounter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZoneServer).Encounter(ctx, req.(*Event))
	}
	return interceptor(ctx, in, info, handler)
}

func _Zone_Catch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Event)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZoneServer).Catch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/buckhx.safari.zone.Zone/Catch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZoneServer).Catch(ctx, req.(*Event))
	}
	return interceptor(ctx, in, info, handler)
}

var _Zone_serviceDesc = grpc.ServiceDesc{
	ServiceName: "buckhx.safari.zone.Zone",
	HandlerType: (*ZoneServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Encounter",
			Handler:    _Zone_Encounter_Handler,
		},
		{
			MethodName: "Catch",
			Handler:    _Zone_Catch_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptorZone,
}

func (m *Event) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Event) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Trainer != nil {
		data[i] = 0xa
		i++
		i = encodeVarintZone(data, i, uint64(m.Trainer.Size()))
		n1, err := m.Trainer.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.Pokemon != nil {
		data[i] = 0x12
		i++
		i = encodeVarintZone(data, i, uint64(m.Pokemon.Size()))
		n2, err := m.Pokemon.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.Region != nil {
		data[i] = 0x1a
		i++
		i = encodeVarintZone(data, i, uint64(m.Region.Size()))
		n3, err := m.Region.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.Time != nil {
		data[i] = 0x22
		i++
		i = encodeVarintZone(data, i, uint64(m.Time.Size()))
		n4, err := m.Time.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}

func (m *Region) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Region) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		data[i] = 0x8
		i++
		i = encodeVarintZone(data, i, uint64(m.Code))
	}
	if m.OptCode != 0 {
		data[i] = 0x78
		i++
		i = encodeVarintZone(data, i, uint64(m.OptCode))
	}
	return i, nil
}

func encodeFixed64Zone(data []byte, offset int, v uint64) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	data[offset+4] = uint8(v >> 32)
	data[offset+5] = uint8(v >> 40)
	data[offset+6] = uint8(v >> 48)
	data[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Zone(data []byte, offset int, v uint32) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintZone(data []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		data[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	data[offset] = uint8(v)
	return offset + 1
}
func (m *Event) Size() (n int) {
	var l int
	_ = l
	if m.Trainer != nil {
		l = m.Trainer.Size()
		n += 1 + l + sovZone(uint64(l))
	}
	if m.Pokemon != nil {
		l = m.Pokemon.Size()
		n += 1 + l + sovZone(uint64(l))
	}
	if m.Region != nil {
		l = m.Region.Size()
		n += 1 + l + sovZone(uint64(l))
	}
	if m.Time != nil {
		l = m.Time.Size()
		n += 1 + l + sovZone(uint64(l))
	}
	return n
}

func (m *Region) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovZone(uint64(m.Code))
	}
	if m.OptCode != 0 {
		n += 1 + sovZone(uint64(m.OptCode))
	}
	return n
}

func sovZone(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozZone(x uint64) (n int) {
	return sovZone(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Event) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Event{`,
		`Trainer:` + strings.Replace(fmt.Sprintf("%v", this.Trainer), "Trainer", "Trainer", 1) + `,`,
		`Pokemon:` + strings.Replace(fmt.Sprintf("%v", this.Pokemon), "Pokemon", "Pokemon", 1) + `,`,
		`Region:` + strings.Replace(fmt.Sprintf("%v", this.Region), "Region", "Region", 1) + `,`,
		`Time:` + strings.Replace(fmt.Sprintf("%v", this.Time), "Timestamp", "Timestamp", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Region) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Region{`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`OptCode:` + fmt.Sprintf("%v", this.OptCode) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringZone(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Event) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZone
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Event: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Event: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Trainer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZone
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZone
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Trainer == nil {
				m.Trainer = &Trainer{}
			}
			if err := m.Trainer.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pokemon", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZone
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZone
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pokemon == nil {
				m.Pokemon = &Pokemon{}
			}
			if err := m.Pokemon.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Region", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZone
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZone
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Region == nil {
				m.Region = &Region{}
			}
			if err := m.Region.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZone
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZone
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Time == nil {
				m.Time = &Timestamp{}
			}
			if err := m.Time.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZone(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZone
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Region) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZone
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Region: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Region: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZone
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Code |= (Region_Code(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OptCode", wireType)
			}
			m.OptCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZone
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.OptCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipZone(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZone
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipZone(data []byte) (n int, err error) {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowZone
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowZone
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if data[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowZone
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthZone
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowZone
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipZone(data[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthZone = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowZone   = fmt.Errorf("proto: integer overflow")
)

var fileDescriptorZone = []byte{
	// 524 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x7c, 0x53, 0x31, 0x6f, 0xd3, 0x40,
	0x14, 0x8e, 0x13, 0x27, 0x21, 0x0f, 0x5a, 0xac, 0x9b, 0xd2, 0x50, 0x02, 0xf2, 0x84, 0x10, 0x3a,
	0xd3, 0x14, 0xa9, 0x88, 0x2d, 0xb4, 0x96, 0x12, 0x28, 0x36, 0xba, 0x04, 0x90, 0xba, 0x54, 0x4e,
	0x72, 0x4d, 0xad, 0x12, 0x9f, 0x15, 0x5f, 0x50, 0x69, 0x54, 0x09, 0xf1, 0x0b, 0x90, 0xf8, 0x13,
	0x4c, 0xfc, 0x0e, 0xc6, 0x4a, 0x2c, 0x8c, 0x6d, 0x61, 0x60, 0x64, 0x65, 0xe3, 0xdd, 0xd9, 0x1e,
	0x28, 0x0d, 0xc3, 0xd3, 0x7d, 0xef, 0xde, 0xf7, 0xdd, 0x77, 0xcf, 0xef, 0x0c, 0x70, 0x24, 0x22,
	0x4e, 0xe3, 0xa9, 0x90, 0x82, 0x90, 0xc1, 0x6c, 0x78, 0xb0, 0x7f, 0x48, 0x93, 0x60, 0x2f, 0x98,
	0x86, 0x54, 0x55, 0x1a, 0xab, 0x63, 0x21, 0xc6, 0xaf, 0xb9, 0x13, 0xc4, 0xa1, 0x13, 0x44, 0x91,
	0x90, 0x81, 0x0c, 0x45, 0x94, 0xa4, 0x8a, 0xc6, 0x52, 0x2c, 0x0e, 0xf8, 0x88, 0x1f, 0x66, 0xe9,
	0x35, 0x1e, 0xc9, 0x50, 0xbe, 0xcd, 0xb2, 0xda, 0x24, 0x19, 0xa7, 0xd0, 0x3e, 0x35, 0xa0, 0xec,
	0xbe, 0xc1, 0x2a, 0xd9, 0x80, 0xaa, 0x9c, 0x06, 0x61, 0xc4, 0xa7, 0x75, 0xe3, 0xb6, 0x71, 0xe7,
	0x6a, 0xeb, 0x26, 0xfd, 0xdb, 0x35, 0x3b, 0xa2, 0x9f, 0x92, 0x58, 0xce, 0x26, 0x0f, 0xa1, 0xaa,
	0xcc, 0x26, 0x22, 0xaa, 0x17, 0xb5, 0xb0, 0x79, 0x41, 0x98, 0x5f, 0xe5, 0x79, 0xca, 0x62, 0x39,
	0x9d, 0xb4, 0xa0, 0x32, 0xe5, 0x63, 0xbc, 0x75, 0xbd, 0xa4, 0x85, 0x0d, 0xfa, 0x6f, 0x9f, 0x94,
	0x69, 0x06, 0xcb, 0x98, 0xe4, 0x3e, 0x98, 0x32, 0x9c, 0xf0, 0xba, 0xa9, 0x15, 0xab, 0x17, 0x14,
	0xaa, 0xb1, 0x3e, 0x96, 0x13, 0x19, 0x4c, 0x62, 0xa6, 0x99, 0xf6, 0x67, 0x03, 0x2a, 0xe9, 0x21,
	0x64, 0x1d, 0xcc, 0xa1, 0x18, 0x71, 0xdd, 0xe0, 0x72, 0xeb, 0xd6, 0x62, 0x3b, 0xba, 0x89, 0x34,
	0xa6, 0xc9, 0x64, 0x05, 0xae, 0x88, 0x58, 0xee, 0x6a, 0xe1, 0x75, 0x14, 0x96, 0x59, 0x15, 0x73,
	0x45, 0xb0, 0xfb, 0x60, 0xaa, 0x95, 0xd4, 0xa0, 0xfc, 0xb4, 0xed, 0xf5, 0x7d, 0xab, 0xa0, 0xe0,
	0x13, 0xbf, 0x83, 0xd0, 0x50, 0xb0, 0xe3, 0xbb, 0x9e, 0x67, 0x15, 0x09, 0x40, 0xa5, 0xd7, 0xf5,
	0x3c, 0xbf, 0x63, 0x95, 0xd4, 0xf6, 0x0b, 0xcf, 0x7f, 0xd9, 0xb6, 0xcc, 0x54, 0xb7, 0xed, 0xf7,
	0xac, 0xb2, 0x82, 0x88, 0xb6, 0xdb, 0x56, 0xe5, 0xee, 0x23, 0xa8, 0xed, 0xe0, 0x55, 0x7a, 0x43,
	0x11, 0x73, 0xb2, 0x84, 0x89, 0xef, 0xb9, 0xbb, 0xcc, 0x6d, 0x6f, 0xe1, 0xf1, 0xcb, 0x00, 0x3a,
	0x7d, 0xc5, 0xba, 0x7d, 0x17, 0x3d, 0xf2, 0xbc, 0xbd, 0xf5, 0xac, 0x8b, 0x46, 0xad, 0xdf, 0x06,
	0x98, 0x4a, 0x4c, 0x8e, 0xa0, 0xe6, 0x46, 0x43, 0x31, 0x8b, 0x24, 0x8e, 0x68, 0xe5, 0xb2, 0x4e,
	0xf5, 0xd8, 0x1b, 0x8b, 0x4b, 0xf6, 0xc6, 0xfb, 0xaf, 0x3f, 0x3e, 0x16, 0xd7, 0x88, 0xe3, 0x64,
	0xa3, 0x76, 0xe6, 0x19, 0xa0, 0xb3, 0x70, 0x74, 0xec, 0xa4, 0x13, 0x71, 0xe6, 0xe9, 0x4a, 0xf3,
	0x8f, 0x74, 0x4c, 0x66, 0x50, 0xde, 0x0c, 0xe4, 0x70, 0xff, 0x7f, 0xbe, 0x37, 0x2e, 0x99, 0x1c,
	0xe3, 0x49, 0x8c, 0x4f, 0x98, 0xdb, 0x0f, 0xb4, 0x33, 0xb5, 0xef, 0x2d, 0x70, 0xce, 0x1e, 0x90,
	0x33, 0xcf, 0x80, 0xde, 0x7d, 0xbc, 0x76, 0x72, 0xd6, 0x2c, 0x7c, 0xc3, 0xf8, 0x75, 0xd6, 0x34,
	0xde, 0x9d, 0x37, 0x8d, 0x4f, 0x18, 0x5f, 0x30, 0x4e, 0x30, 0x4e, 0x31, 0x7e, 0x9e, 0x63, 0x0d,
	0xd7, 0x0f, 0xdf, 0x9b, 0x85, 0x9d, 0x52, 0x3c, 0xd8, 0x1b, 0x54, 0xf4, 0x5f, 0xb0, 0xfe, 0x27,
	0x00, 0x00, 0xff, 0xff, 0x10, 0xd8, 0x55, 0xdd, 0x6d, 0x03, 0x00, 0x00,
}
