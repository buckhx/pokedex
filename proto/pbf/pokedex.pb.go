// Code generated by protoc-gen-gogo.
// source: pokedex.proto
// DO NOT EDIT!

package pbf

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gengo/grpc-gateway/third_party/googleapis/google/api"

import strconv "strconv"

import strings "strings"
import github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"
import sort "sort"
import reflect "reflect"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type PokedexScope int32

const (
	PDX_READ  PokedexScope = 0
	PDX_WRITE PokedexScope = 1
)

var PokedexScope_name = map[int32]string{
	0: "PDX_READ",
	1: "PDX_WRITE",
}
var PokedexScope_value = map[string]int32{
	"PDX_READ":  0,
	"PDX_WRITE": 1,
}

func (PokedexScope) EnumDescriptor() ([]byte, []int) { return fileDescriptorPokedex, []int{0} }

// Pokemon_Type is the canonical type of a pokemon
type Pokemon_Type int32

const (
	UNKNOWN  Pokemon_Type = 0
	NORMAL   Pokemon_Type = 1
	FIGHTING Pokemon_Type = 2
	FLYING   Pokemon_Type = 3
	POISON   Pokemon_Type = 4
	GROUND   Pokemon_Type = 5
	ROCK     Pokemon_Type = 6
	BUG      Pokemon_Type = 7
	GHOST    Pokemon_Type = 8
	STEEL    Pokemon_Type = 9
	FIRE     Pokemon_Type = 10
	WATER    Pokemon_Type = 11
	GRASS    Pokemon_Type = 12
	ELECTRIC Pokemon_Type = 13
	PSYCHIC  Pokemon_Type = 14
	ICE      Pokemon_Type = 15
	DRAGON   Pokemon_Type = 16
	DARK     Pokemon_Type = 17
	FAIRY    Pokemon_Type = 18
)

var Pokemon_Type_name = map[int32]string{
	0:  "UNKNOWN",
	1:  "NORMAL",
	2:  "FIGHTING",
	3:  "FLYING",
	4:  "POISON",
	5:  "GROUND",
	6:  "ROCK",
	7:  "BUG",
	8:  "GHOST",
	9:  "STEEL",
	10: "FIRE",
	11: "WATER",
	12: "GRASS",
	13: "ELECTRIC",
	14: "PSYCHIC",
	15: "ICE",
	16: "DRAGON",
	17: "DARK",
	18: "FAIRY",
}
var Pokemon_Type_value = map[string]int32{
	"UNKNOWN":  0,
	"NORMAL":   1,
	"FIGHTING": 2,
	"FLYING":   3,
	"POISON":   4,
	"GROUND":   5,
	"ROCK":     6,
	"BUG":      7,
	"GHOST":    8,
	"STEEL":    9,
	"FIRE":     10,
	"WATER":    11,
	"GRASS":    12,
	"ELECTRIC": 13,
	"PSYCHIC":  14,
	"ICE":      15,
	"DRAGON":   16,
	"DARK":     17,
	"FAIRY":    18,
}

func (Pokemon_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptorPokedex, []int{0, 0} }

// Pokemon message is info about a pokemon
type Pokemon struct {
	// Uid is the unique identifier for this individual pokemon
	Uid string `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	// NickName is the name this pokemon has been given by it's trainer
	NickName string `protobuf:"bytes,2,opt,name=nick_name,json=nickName,proto3" json:"nick_name,omitempty"`
	// Name is the English name of the pokemon
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// Number is the canonical pokemon identifier
	Number int32 `protobuf:"varint,4,opt,name=number,proto3" json:"number,omitempty"`
	// Type is the type of this pokemon
	Type []Pokemon_Type `protobuf:"varint,5,rep,name=type,enum=buckhx.safari.pokedex.Pokemon_Type" json:"type,omitempty"`
	// CatchRate is chance of catching on a scale of 1-255
	CatchRate int32 `protobuf:"varint,6,opt,name=catch_rate,json=catchRate,proto3" json:"catch_rate,omitempty"`
	// Speed is how fast the pokemon is on a scale 1-100
	Speed int32 `protobuf:"varint,7,opt,name=speed,proto3" json:"speed,omitempty"`
}

func (m *Pokemon) Reset()                    { *m = Pokemon{} }
func (*Pokemon) ProtoMessage()               {}
func (*Pokemon) Descriptor() ([]byte, []int) { return fileDescriptorPokedex, []int{0} }

// Pokemon_Collection is self evident
type Pokemon_Collection struct {
	Pokemon []*Pokemon `protobuf:"bytes,1,rep,name=pokemon" json:"pokemon,omitempty"`
}

func (m *Pokemon_Collection) Reset()                    { *m = Pokemon_Collection{} }
func (*Pokemon_Collection) ProtoMessage()               {}
func (*Pokemon_Collection) Descriptor() ([]byte, []int) { return fileDescriptorPokedex, []int{0, 0} }

func (m *Pokemon_Collection) GetPokemon() []*Pokemon {
	if m != nil {
		return m.Pokemon
	}
	return nil
}

func init() {
	proto.RegisterType((*Pokemon)(nil), "buckhx.safari.pokedex.Pokemon")
	proto.RegisterType((*Pokemon_Collection)(nil), "buckhx.safari.pokedex.Pokemon.Collection")
	proto.RegisterEnum("buckhx.safari.pokedex.PokedexScope", PokedexScope_name, PokedexScope_value)
	proto.RegisterEnum("buckhx.safari.pokedex.Pokemon_Type", Pokemon_Type_name, Pokemon_Type_value)
}
func (x PokedexScope) String() string {
	s, ok := PokedexScope_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x Pokemon_Type) String() string {
	s, ok := Pokemon_Type_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *Pokemon) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Pokemon)
	if !ok {
		that2, ok := that.(Pokemon)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Uid != that1.Uid {
		return false
	}
	if this.NickName != that1.NickName {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Number != that1.Number {
		return false
	}
	if len(this.Type) != len(that1.Type) {
		return false
	}
	for i := range this.Type {
		if this.Type[i] != that1.Type[i] {
			return false
		}
	}
	if this.CatchRate != that1.CatchRate {
		return false
	}
	if this.Speed != that1.Speed {
		return false
	}
	return true
}
func (this *Pokemon_Collection) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Pokemon_Collection)
	if !ok {
		that2, ok := that.(Pokemon_Collection)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.Pokemon) != len(that1.Pokemon) {
		return false
	}
	for i := range this.Pokemon {
		if !this.Pokemon[i].Equal(that1.Pokemon[i]) {
			return false
		}
	}
	return true
}
func (this *Pokemon) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&pbf.Pokemon{")
	s = append(s, "Uid: "+fmt.Sprintf("%#v", this.Uid)+",\n")
	s = append(s, "NickName: "+fmt.Sprintf("%#v", this.NickName)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Number: "+fmt.Sprintf("%#v", this.Number)+",\n")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "CatchRate: "+fmt.Sprintf("%#v", this.CatchRate)+",\n")
	s = append(s, "Speed: "+fmt.Sprintf("%#v", this.Speed)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Pokemon_Collection) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pbf.Pokemon_Collection{")
	if this.Pokemon != nil {
		s = append(s, "Pokemon: "+fmt.Sprintf("%#v", this.Pokemon)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringPokedex(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func extensionToGoStringPokedex(e map[int32]github_com_gogo_protobuf_proto.Extension) string {
	if e == nil {
		return "nil"
	}
	s := "map[int32]proto.Extension{"
	keys := make([]int, 0, len(e))
	for k := range e {
		keys = append(keys, int(k))
	}
	sort.Ints(keys)
	ss := []string{}
	for _, k := range keys {
		ss = append(ss, strconv.Itoa(k)+": "+e[int32(k)].GoString())
	}
	s += strings.Join(ss, ",") + "}"
	return s
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for Pokedex service

type PokedexClient interface {
	// GetPokemon method retrieves info about the pokemon at the given number
	//
	// Any other supplied attributes will be ignored
	GetPokemon(ctx context.Context, in *Pokemon, opts ...grpc.CallOption) (*Pokemon_Collection, error)
}

type pokedexClient struct {
	cc *grpc.ClientConn
}

func NewPokedexClient(cc *grpc.ClientConn) PokedexClient {
	return &pokedexClient{cc}
}

func (c *pokedexClient) GetPokemon(ctx context.Context, in *Pokemon, opts ...grpc.CallOption) (*Pokemon_Collection, error) {
	out := new(Pokemon_Collection)
	err := grpc.Invoke(ctx, "/buckhx.safari.pokedex.Pokedex/GetPokemon", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Pokedex service

type PokedexServer interface {
	// GetPokemon method retrieves info about the pokemon at the given number
	//
	// Any other supplied attributes will be ignored
	GetPokemon(context.Context, *Pokemon) (*Pokemon_Collection, error)
}

func RegisterPokedexServer(s *grpc.Server, srv PokedexServer) {
	s.RegisterService(&_Pokedex_serviceDesc, srv)
}

func _Pokedex_GetPokemon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Pokemon)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PokedexServer).GetPokemon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/buckhx.safari.pokedex.Pokedex/GetPokemon",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PokedexServer).GetPokemon(ctx, req.(*Pokemon))
	}
	return interceptor(ctx, in, info, handler)
}

var _Pokedex_serviceDesc = grpc.ServiceDesc{
	ServiceName: "buckhx.safari.pokedex.Pokedex",
	HandlerType: (*PokedexServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPokemon",
			Handler:    _Pokedex_GetPokemon_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptorPokedex,
}

func (m *Pokemon) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Pokemon) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Uid) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintPokedex(data, i, uint64(len(m.Uid)))
		i += copy(data[i:], m.Uid)
	}
	if len(m.NickName) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintPokedex(data, i, uint64(len(m.NickName)))
		i += copy(data[i:], m.NickName)
	}
	if len(m.Name) > 0 {
		data[i] = 0x1a
		i++
		i = encodeVarintPokedex(data, i, uint64(len(m.Name)))
		i += copy(data[i:], m.Name)
	}
	if m.Number != 0 {
		data[i] = 0x20
		i++
		i = encodeVarintPokedex(data, i, uint64(m.Number))
	}
	if len(m.Type) > 0 {
		for _, num := range m.Type {
			data[i] = 0x28
			i++
			i = encodeVarintPokedex(data, i, uint64(num))
		}
	}
	if m.CatchRate != 0 {
		data[i] = 0x30
		i++
		i = encodeVarintPokedex(data, i, uint64(m.CatchRate))
	}
	if m.Speed != 0 {
		data[i] = 0x38
		i++
		i = encodeVarintPokedex(data, i, uint64(m.Speed))
	}
	return i, nil
}

func (m *Pokemon_Collection) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Pokemon_Collection) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Pokemon) > 0 {
		for _, msg := range m.Pokemon {
			data[i] = 0xa
			i++
			i = encodeVarintPokedex(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeFixed64Pokedex(data []byte, offset int, v uint64) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	data[offset+4] = uint8(v >> 32)
	data[offset+5] = uint8(v >> 40)
	data[offset+6] = uint8(v >> 48)
	data[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Pokedex(data []byte, offset int, v uint32) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintPokedex(data []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		data[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	data[offset] = uint8(v)
	return offset + 1
}
func (m *Pokemon) Size() (n int) {
	var l int
	_ = l
	l = len(m.Uid)
	if l > 0 {
		n += 1 + l + sovPokedex(uint64(l))
	}
	l = len(m.NickName)
	if l > 0 {
		n += 1 + l + sovPokedex(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovPokedex(uint64(l))
	}
	if m.Number != 0 {
		n += 1 + sovPokedex(uint64(m.Number))
	}
	if len(m.Type) > 0 {
		for _, e := range m.Type {
			n += 1 + sovPokedex(uint64(e))
		}
	}
	if m.CatchRate != 0 {
		n += 1 + sovPokedex(uint64(m.CatchRate))
	}
	if m.Speed != 0 {
		n += 1 + sovPokedex(uint64(m.Speed))
	}
	return n
}

func (m *Pokemon_Collection) Size() (n int) {
	var l int
	_ = l
	if len(m.Pokemon) > 0 {
		for _, e := range m.Pokemon {
			l = e.Size()
			n += 1 + l + sovPokedex(uint64(l))
		}
	}
	return n
}

func sovPokedex(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozPokedex(x uint64) (n int) {
	return sovPokedex(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Pokemon) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Pokemon{`,
		`Uid:` + fmt.Sprintf("%v", this.Uid) + `,`,
		`NickName:` + fmt.Sprintf("%v", this.NickName) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Number:` + fmt.Sprintf("%v", this.Number) + `,`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`CatchRate:` + fmt.Sprintf("%v", this.CatchRate) + `,`,
		`Speed:` + fmt.Sprintf("%v", this.Speed) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Pokemon_Collection) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Pokemon_Collection{`,
		`Pokemon:` + strings.Replace(fmt.Sprintf("%v", this.Pokemon), "Pokemon", "Pokemon", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringPokedex(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Pokemon) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPokedex
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Pokemon: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Pokemon: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPokedex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPokedex
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uid = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NickName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPokedex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPokedex
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NickName = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPokedex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPokedex
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Number", wireType)
			}
			m.Number = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPokedex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Number |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var v Pokemon_Type
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPokedex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (Pokemon_Type(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Type = append(m.Type, v)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CatchRate", wireType)
			}
			m.CatchRate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPokedex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.CatchRate |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Speed", wireType)
			}
			m.Speed = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPokedex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Speed |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPokedex(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPokedex
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Pokemon_Collection) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPokedex
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Collection: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Collection: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pokemon", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPokedex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPokedex
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pokemon = append(m.Pokemon, &Pokemon{})
			if err := m.Pokemon[len(m.Pokemon)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPokedex(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPokedex
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPokedex(data []byte) (n int, err error) {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPokedex
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPokedex
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if data[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPokedex
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthPokedex
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowPokedex
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipPokedex(data[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthPokedex = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPokedex   = fmt.Errorf("proto: integer overflow")
)

var fileDescriptorPokedex = []byte{
	// 560 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x84, 0x52, 0xc1, 0x8e, 0xd2, 0x5c,
	0x14, 0x9e, 0x4e, 0x0b, 0xa5, 0x07, 0x98, 0xff, 0xce, 0xfd, 0xd5, 0x54, 0x54, 0x32, 0xc1, 0x0d,
	0x6a, 0x52, 0x22, 0x2e, 0x74, 0xdb, 0x29, 0xa5, 0x34, 0x60, 0x4b, 0x6e, 0x4b, 0x10, 0x37, 0xa4,
	0x94, 0xce, 0x0c, 0x01, 0xda, 0x06, 0x4a, 0x32, 0xc6, 0x4c, 0x62, 0x7c, 0x02, 0x13, 0x5f, 0xc2,
	0x47, 0x71, 0x39, 0x89, 0x1b, 0x77, 0x3a, 0xa3, 0x0b, 0x97, 0x3e, 0x80, 0x0b, 0xef, 0x6d, 0x99,
	0xb8, 0x31, 0xce, 0xe2, 0xa4, 0xdf, 0xf9, 0xce, 0x77, 0xbf, 0x7b, 0x4e, 0xef, 0x81, 0x72, 0x1c,
	0xcd, 0x83, 0x69, 0x70, 0xaa, 0xc4, 0xab, 0x28, 0x89, 0xf0, 0xcd, 0xc9, 0xc6, 0x9f, 0x9f, 0x9c,
	0x2a, 0x6b, 0xef, 0xc8, 0x5b, 0xcd, 0x94, 0x6d, 0xb1, 0x72, 0xf7, 0x38, 0x8a, 0x8e, 0x17, 0x41,
	0xc3, 0x8b, 0x67, 0x0d, 0x2f, 0x0c, 0xa3, 0xc4, 0x4b, 0x66, 0x51, 0xb8, 0xce, 0x0e, 0xd5, 0x7e,
	0xf1, 0x20, 0xf6, 0xa9, 0x72, 0x19, 0x85, 0x18, 0x01, 0xbf, 0x99, 0x4d, 0x65, 0xee, 0x80, 0xab,
	0x4b, 0x84, 0x41, 0x7c, 0x07, 0xa4, 0x70, 0xe6, 0xcf, 0xc7, 0xa1, 0xb7, 0x0c, 0xe4, 0xdd, 0x94,
	0x2f, 0x30, 0xc2, 0xa2, 0x39, 0xc6, 0x20, 0xa4, 0x3c, 0x9f, 0xf2, 0x29, 0xc6, 0xb7, 0x20, 0x1f,
	0x6e, 0x96, 0x93, 0x60, 0x25, 0x0b, 0x94, 0xcd, 0x91, 0x6d, 0x86, 0x9f, 0x82, 0x90, 0xbc, 0x8a,
	0x03, 0x39, 0x77, 0xc0, 0xd7, 0xf7, 0x9a, 0xf7, 0x95, 0xbf, 0xb6, 0xaa, 0x6c, 0x1b, 0x51, 0x5c,
	0x2a, 0x25, 0xe9, 0x01, 0x7c, 0x0f, 0xc0, 0xf7, 0x12, 0xff, 0x64, 0xbc, 0xf2, 0x92, 0x40, 0xce,
	0xa7, 0xa6, 0x52, 0xca, 0x10, 0x4a, 0xe0, 0x1b, 0x90, 0x5b, 0xc7, 0x41, 0x30, 0x95, 0xc5, 0xb4,
	0x92, 0x25, 0x95, 0x36, 0x80, 0x16, 0x2d, 0x16, 0x81, 0xcf, 0x26, 0xc5, 0xcf, 0x40, 0x8c, 0x33,
	0x63, 0x3a, 0x1a, 0x5f, 0x2f, 0x36, 0xab, 0xff, 0xbe, 0x9e, 0x5c, 0xc9, 0x6b, 0x5f, 0x38, 0x10,
	0x58, 0x2f, 0xb8, 0x08, 0xe2, 0xc0, 0xea, 0x5a, 0xf6, 0xd0, 0x42, 0x3b, 0x18, 0x20, 0x6f, 0xd9,
	0xe4, 0xb9, 0xda, 0x43, 0x1c, 0x2e, 0x41, 0xa1, 0x6d, 0x1a, 0x1d, 0xd7, 0xb4, 0x0c, 0xb4, 0xcb,
	0x2a, 0xed, 0xde, 0x88, 0x61, 0x9e, 0xe1, 0xbe, 0x6d, 0x3a, 0xb6, 0x85, 0x04, 0x86, 0x0d, 0x62,
	0x0f, 0xac, 0x16, 0xca, 0xe1, 0x02, 0x08, 0xc4, 0xd6, 0xba, 0x28, 0x8f, 0x45, 0xe0, 0x0f, 0x07,
	0x06, 0x12, 0xb1, 0x04, 0x39, 0xa3, 0x63, 0x3b, 0x2e, 0x2a, 0x30, 0xe8, 0xb8, 0xba, 0xde, 0x43,
	0x12, 0x13, 0xb6, 0x4d, 0xa2, 0x23, 0x60, 0xe4, 0x50, 0x75, 0x75, 0x82, 0x8a, 0xa9, 0x94, 0xa8,
	0x8e, 0x83, 0x4a, 0xec, 0x6a, 0xbd, 0xa7, 0x6b, 0x2e, 0x31, 0x35, 0x54, 0x66, 0x1d, 0xf6, 0x9d,
	0x91, 0xd6, 0xa1, 0xc9, 0x1e, 0x73, 0x36, 0x35, 0x1d, 0xfd, 0xc7, 0x2e, 0x6e, 0x11, 0xd5, 0xa0,
	0x4d, 0x20, 0xe6, 0xd7, 0x52, 0x49, 0x17, 0xed, 0x33, 0x93, 0xb6, 0x6a, 0x92, 0x11, 0xc2, 0x0f,
	0x1f, 0x41, 0xa9, 0x9f, 0x4d, 0xef, 0xf8, 0x11, 0x1d, 0x94, 0x9a, 0xf6, 0x5b, 0x2f, 0xc6, 0x44,
	0x57, 0x5b, 0x74, 0xd2, 0x32, 0x48, 0x2c, 0x1b, 0x12, 0xd3, 0xd5, 0x11, 0xd7, 0x3c, 0xcb, 0x56,
	0x85, 0x8a, 0xf1, 0x0a, 0xc0, 0x08, 0x92, 0xab, 0xc5, 0xb9, 0xe6, 0x87, 0x56, 0x1e, 0x5c, 0xf3,
	0xde, 0x7f, 0x1e, 0xab, 0x76, 0xfb, 0xed, 0xa7, 0xef, 0xef, 0x77, 0xff, 0xc7, 0xfb, 0x8d, 0xed,
	0x23, 0x34, 0x5e, 0x67, 0x2b, 0x74, 0x76, 0xf8, 0xf8, 0xfc, 0xa2, 0xba, 0xf3, 0x99, 0xc6, 0xcf,
	0x8b, 0x2a, 0xf7, 0xe6, 0xb2, 0xca, 0x7d, 0xa0, 0xf1, 0x91, 0xc6, 0x39, 0x8d, 0xaf, 0x34, 0x7e,
	0x5c, 0xd2, 0x1a, 0xfd, 0xbe, 0xfb, 0x56, 0xdd, 0x79, 0xc9, 0xc7, 0x93, 0xa3, 0x49, 0x3e, 0x5d,
	0xf2, 0x27, 0xbf, 0x03, 0x00, 0x00, 0xff, 0xff, 0x08, 0x3d, 0x65, 0x90, 0x2a, 0x03, 0x00, 0x00,
}
