// Code generated by protoc-gen-gogo.
// source: safari.proto
// DO NOT EDIT!

package pbf

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gengo/grpc-gateway/third_party/googleapis/google/api"

import strconv "strconv"

import strings "strings"
import github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"
import sort "sort"
import reflect "reflect"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Zone_Code int32

const (
	KANTO  Zone_Code = 0
	JOHTO  Zone_Code = 1
	HOENN  Zone_Code = 2
	SINNOH Zone_Code = 3
	UNOVA  Zone_Code = 4
	KALOS  Zone_Code = 5
	ALOLA  Zone_Code = 6
)

var Zone_Code_name = map[int32]string{
	0: "KANTO",
	1: "JOHTO",
	2: "HOENN",
	3: "SINNOH",
	4: "UNOVA",
	5: "KALOS",
	6: "ALOLA",
}
var Zone_Code_value = map[string]int32{
	"KANTO":  0,
	"JOHTO":  1,
	"HOENN":  2,
	"SINNOH": 3,
	"UNOVA":  4,
	"KALOS":  5,
	"ALOLA":  6,
}

func (Zone_Code) EnumDescriptor() ([]byte, []int) { return fileDescriptorSafari, []int{3, 0} }

type Ticket struct {
	Uid     string         `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Trainer *Trainer       `protobuf:"bytes,2,opt,name=trainer" json:"trainer,omitempty"`
	Zone    *Zone          `protobuf:"bytes,3,opt,name=zone" json:"zone,omitempty"`
	Time    *Timestamp     `protobuf:"bytes,4,opt,name=time" json:"time,omitempty"`
	Expires *Ticket_Expiry `protobuf:"bytes,5,opt,name=expires" json:"expires,omitempty"`
}

func (m *Ticket) Reset()                    { *m = Ticket{} }
func (*Ticket) ProtoMessage()               {}
func (*Ticket) Descriptor() ([]byte, []int) { return fileDescriptorSafari, []int{0} }

func (m *Ticket) GetTrainer() *Trainer {
	if m != nil {
		return m.Trainer
	}
	return nil
}

func (m *Ticket) GetZone() *Zone {
	if m != nil {
		return m.Zone
	}
	return nil
}

func (m *Ticket) GetTime() *Timestamp {
	if m != nil {
		return m.Time
	}
	return nil
}

func (m *Ticket) GetExpires() *Ticket_Expiry {
	if m != nil {
		return m.Expires
	}
	return nil
}

type Ticket_Expiry struct {
	Encounters int32 `protobuf:"varint,1,opt,name=encounters,proto3" json:"encounters,omitempty"`
	Time       int64 `protobuf:"varint,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (m *Ticket_Expiry) Reset()                    { *m = Ticket_Expiry{} }
func (*Ticket_Expiry) ProtoMessage()               {}
func (*Ticket_Expiry) Descriptor() ([]byte, []int) { return fileDescriptorSafari, []int{0, 0} }

type Action struct {
	// Types that are valid to be assigned to Move:
	//	*Action_Attack
	//	*Action_Item
	//	*Action_Switch
	//	*Action_Run
	Move isAction_Move `protobuf_oneof:"move"`
}

func (m *Action) Reset()                    { *m = Action{} }
func (*Action) ProtoMessage()               {}
func (*Action) Descriptor() ([]byte, []int) { return fileDescriptorSafari, []int{1} }

type isAction_Move interface {
	isAction_Move()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type Action_Attack struct {
	Attack string `protobuf:"bytes,1,opt,name=attack,proto3,oneof"`
}
type Action_Item struct {
	Item string `protobuf:"bytes,2,opt,name=item,proto3,oneof"`
}
type Action_Switch struct {
	Switch *Pokemon `protobuf:"bytes,3,opt,name=switch,oneof"`
}
type Action_Run struct {
	Run bool `protobuf:"varint,4,opt,name=run,proto3,oneof"`
}

func (*Action_Attack) isAction_Move() {}
func (*Action_Item) isAction_Move()   {}
func (*Action_Switch) isAction_Move() {}
func (*Action_Run) isAction_Move()    {}

func (m *Action) GetMove() isAction_Move {
	if m != nil {
		return m.Move
	}
	return nil
}

func (m *Action) GetAttack() string {
	if x, ok := m.GetMove().(*Action_Attack); ok {
		return x.Attack
	}
	return ""
}

func (m *Action) GetItem() string {
	if x, ok := m.GetMove().(*Action_Item); ok {
		return x.Item
	}
	return ""
}

func (m *Action) GetSwitch() *Pokemon {
	if x, ok := m.GetMove().(*Action_Switch); ok {
		return x.Switch
	}
	return nil
}

func (m *Action) GetRun() bool {
	if x, ok := m.GetMove().(*Action_Run); ok {
		return x.Run
	}
	return false
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Action) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Action_OneofMarshaler, _Action_OneofUnmarshaler, _Action_OneofSizer, []interface{}{
		(*Action_Attack)(nil),
		(*Action_Item)(nil),
		(*Action_Switch)(nil),
		(*Action_Run)(nil),
	}
}

func _Action_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Action)
	// move
	switch x := m.Move.(type) {
	case *Action_Attack:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		_ = b.EncodeStringBytes(x.Attack)
	case *Action_Item:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		_ = b.EncodeStringBytes(x.Item)
	case *Action_Switch:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Switch); err != nil {
			return err
		}
	case *Action_Run:
		t := uint64(0)
		if x.Run {
			t = 1
		}
		_ = b.EncodeVarint(4<<3 | proto.WireVarint)
		_ = b.EncodeVarint(t)
	case nil:
	default:
		return fmt.Errorf("Action.Move has unexpected type %T", x)
	}
	return nil
}

func _Action_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Action)
	switch tag {
	case 1: // move.attack
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Move = &Action_Attack{x}
		return true, err
	case 2: // move.item
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Move = &Action_Item{x}
		return true, err
	case 3: // move.switch
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Pokemon)
		err := b.DecodeMessage(msg)
		m.Move = &Action_Switch{msg}
		return true, err
	case 4: // move.run
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Move = &Action_Run{x != 0}
		return true, err
	default:
		return false, nil
	}
}

func _Action_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Action)
	// move
	switch x := m.Move.(type) {
	case *Action_Attack:
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.Attack)))
		n += len(x.Attack)
	case *Action_Item:
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.Item)))
		n += len(x.Item)
	case *Action_Switch:
		s := proto.Size(x.Switch)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Action_Run:
		n += proto.SizeVarint(4<<3 | proto.WireVarint)
		n += 1
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type BattleMessage struct {
	Msg string `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (m *BattleMessage) Reset()                    { *m = BattleMessage{} }
func (*BattleMessage) ProtoMessage()               {}
func (*BattleMessage) Descriptor() ([]byte, []int) { return fileDescriptorSafari, []int{2} }

type Zone struct {
	Region  Zone_Code `protobuf:"varint,1,opt,name=region,proto3,enum=buckhx.safari.zone.Zone_Code" json:"region,omitempty"`
	OptCode int32     `protobuf:"varint,15,opt,name=opt_code,json=optCode,proto3" json:"opt_code,omitempty"`
}

func (m *Zone) Reset()                    { *m = Zone{} }
func (*Zone) ProtoMessage()               {}
func (*Zone) Descriptor() ([]byte, []int) { return fileDescriptorSafari, []int{3} }

func init() {
	proto.RegisterType((*Ticket)(nil), "buckhx.safari.zone.Ticket")
	proto.RegisterType((*Ticket_Expiry)(nil), "buckhx.safari.zone.Ticket.Expiry")
	proto.RegisterType((*Action)(nil), "buckhx.safari.zone.Action")
	proto.RegisterType((*BattleMessage)(nil), "buckhx.safari.zone.BattleMessage")
	proto.RegisterType((*Zone)(nil), "buckhx.safari.zone.Zone")
	proto.RegisterEnum("buckhx.safari.zone.Zone_Code", Zone_Code_name, Zone_Code_value)
}
func (x Zone_Code) String() string {
	s, ok := Zone_Code_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *Ticket) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Ticket)
	if !ok {
		that2, ok := that.(Ticket)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Uid != that1.Uid {
		return false
	}
	if !this.Trainer.Equal(that1.Trainer) {
		return false
	}
	if !this.Zone.Equal(that1.Zone) {
		return false
	}
	if !this.Time.Equal(that1.Time) {
		return false
	}
	if !this.Expires.Equal(that1.Expires) {
		return false
	}
	return true
}
func (this *Ticket_Expiry) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Ticket_Expiry)
	if !ok {
		that2, ok := that.(Ticket_Expiry)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Encounters != that1.Encounters {
		return false
	}
	if this.Time != that1.Time {
		return false
	}
	return true
}
func (this *Action) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Action)
	if !ok {
		that2, ok := that.(Action)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if that1.Move == nil {
		if this.Move != nil {
			return false
		}
	} else if this.Move == nil {
		return false
	} else if !this.Move.Equal(that1.Move) {
		return false
	}
	return true
}
func (this *Action_Attack) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Action_Attack)
	if !ok {
		that2, ok := that.(Action_Attack)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Attack != that1.Attack {
		return false
	}
	return true
}
func (this *Action_Item) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Action_Item)
	if !ok {
		that2, ok := that.(Action_Item)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Item != that1.Item {
		return false
	}
	return true
}
func (this *Action_Switch) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Action_Switch)
	if !ok {
		that2, ok := that.(Action_Switch)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Switch.Equal(that1.Switch) {
		return false
	}
	return true
}
func (this *Action_Run) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Action_Run)
	if !ok {
		that2, ok := that.(Action_Run)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Run != that1.Run {
		return false
	}
	return true
}
func (this *BattleMessage) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*BattleMessage)
	if !ok {
		that2, ok := that.(BattleMessage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Msg != that1.Msg {
		return false
	}
	return true
}
func (this *Zone) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Zone)
	if !ok {
		that2, ok := that.(Zone)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Region != that1.Region {
		return false
	}
	if this.OptCode != that1.OptCode {
		return false
	}
	return true
}
func (this *Ticket) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&pbf.Ticket{")
	s = append(s, "Uid: "+fmt.Sprintf("%#v", this.Uid)+",\n")
	if this.Trainer != nil {
		s = append(s, "Trainer: "+fmt.Sprintf("%#v", this.Trainer)+",\n")
	}
	if this.Zone != nil {
		s = append(s, "Zone: "+fmt.Sprintf("%#v", this.Zone)+",\n")
	}
	if this.Time != nil {
		s = append(s, "Time: "+fmt.Sprintf("%#v", this.Time)+",\n")
	}
	if this.Expires != nil {
		s = append(s, "Expires: "+fmt.Sprintf("%#v", this.Expires)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Ticket_Expiry) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pbf.Ticket_Expiry{")
	s = append(s, "Encounters: "+fmt.Sprintf("%#v", this.Encounters)+",\n")
	s = append(s, "Time: "+fmt.Sprintf("%#v", this.Time)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Action) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&pbf.Action{")
	if this.Move != nil {
		s = append(s, "Move: "+fmt.Sprintf("%#v", this.Move)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Action_Attack) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&pbf.Action_Attack{` +
		`Attack:` + fmt.Sprintf("%#v", this.Attack) + `}`}, ", ")
	return s
}
func (this *Action_Item) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&pbf.Action_Item{` +
		`Item:` + fmt.Sprintf("%#v", this.Item) + `}`}, ", ")
	return s
}
func (this *Action_Switch) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&pbf.Action_Switch{` +
		`Switch:` + fmt.Sprintf("%#v", this.Switch) + `}`}, ", ")
	return s
}
func (this *Action_Run) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&pbf.Action_Run{` +
		`Run:` + fmt.Sprintf("%#v", this.Run) + `}`}, ", ")
	return s
}
func (this *BattleMessage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pbf.BattleMessage{")
	s = append(s, "Msg: "+fmt.Sprintf("%#v", this.Msg)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Zone) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pbf.Zone{")
	s = append(s, "Region: "+fmt.Sprintf("%#v", this.Region)+",\n")
	s = append(s, "OptCode: "+fmt.Sprintf("%#v", this.OptCode)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringSafari(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func extensionToGoStringSafari(e map[int32]github_com_gogo_protobuf_proto.Extension) string {
	if e == nil {
		return "nil"
	}
	s := "map[int32]proto.Extension{"
	keys := make([]int, 0, len(e))
	for k := range e {
		keys = append(keys, int(k))
	}
	sort.Ints(keys)
	ss := []string{}
	for _, k := range keys {
		ss = append(ss, strconv.Itoa(k)+": "+e[int32(k)].GoString())
	}
	s += strings.Join(ss, ",") + "}"
	return s
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for Safari service

type SafariClient interface {
	// Encounter might add a pokemon to the event
	//
	// A pokemon will be added to the event and timestmap set if one is encountered
	Enter(ctx context.Context, in *Ticket, opts ...grpc.CallOption) (*Ticket, error)
	// Catch will attempt to catch the pokemon
	//
	// If caught, this pokemon will be deposited into the Trainer's PC
	Encounter(ctx context.Context, opts ...grpc.CallOption) (Safari_EncounterClient, error)
}

type safariClient struct {
	cc *grpc.ClientConn
}

func NewSafariClient(cc *grpc.ClientConn) SafariClient {
	return &safariClient{cc}
}

func (c *safariClient) Enter(ctx context.Context, in *Ticket, opts ...grpc.CallOption) (*Ticket, error) {
	out := new(Ticket)
	err := grpc.Invoke(ctx, "/buckhx.safari.zone.Safari/Enter", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *safariClient) Encounter(ctx context.Context, opts ...grpc.CallOption) (Safari_EncounterClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Safari_serviceDesc.Streams[0], c.cc, "/buckhx.safari.zone.Safari/Encounter", opts...)
	if err != nil {
		return nil, err
	}
	x := &safariEncounterClient{stream}
	return x, nil
}

type Safari_EncounterClient interface {
	Send(*Action) error
	Recv() (*BattleMessage, error)
	grpc.ClientStream
}

type safariEncounterClient struct {
	grpc.ClientStream
}

func (x *safariEncounterClient) Send(m *Action) error {
	return x.ClientStream.SendMsg(m)
}

func (x *safariEncounterClient) Recv() (*BattleMessage, error) {
	m := new(BattleMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Safari service

type SafariServer interface {
	// Encounter might add a pokemon to the event
	//
	// A pokemon will be added to the event and timestmap set if one is encountered
	Enter(context.Context, *Ticket) (*Ticket, error)
	// Catch will attempt to catch the pokemon
	//
	// If caught, this pokemon will be deposited into the Trainer's PC
	Encounter(Safari_EncounterServer) error
}

func RegisterSafariServer(s *grpc.Server, srv SafariServer) {
	s.RegisterService(&_Safari_serviceDesc, srv)
}

func _Safari_Enter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ticket)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SafariServer).Enter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/buckhx.safari.zone.Safari/Enter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SafariServer).Enter(ctx, req.(*Ticket))
	}
	return interceptor(ctx, in, info, handler)
}

func _Safari_Encounter_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SafariServer).Encounter(&safariEncounterServer{stream})
}

type Safari_EncounterServer interface {
	Send(*BattleMessage) error
	Recv() (*Action, error)
	grpc.ServerStream
}

type safariEncounterServer struct {
	grpc.ServerStream
}

func (x *safariEncounterServer) Send(m *BattleMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *safariEncounterServer) Recv() (*Action, error) {
	m := new(Action)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Safari_serviceDesc = grpc.ServiceDesc{
	ServiceName: "buckhx.safari.zone.Safari",
	HandlerType: (*SafariServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Enter",
			Handler:    _Safari_Enter_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Encounter",
			Handler:       _Safari_Encounter_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: fileDescriptorSafari,
}

func (m *Ticket) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Ticket) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Uid) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSafari(data, i, uint64(len(m.Uid)))
		i += copy(data[i:], m.Uid)
	}
	if m.Trainer != nil {
		data[i] = 0x12
		i++
		i = encodeVarintSafari(data, i, uint64(m.Trainer.Size()))
		n1, err := m.Trainer.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.Zone != nil {
		data[i] = 0x1a
		i++
		i = encodeVarintSafari(data, i, uint64(m.Zone.Size()))
		n2, err := m.Zone.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.Time != nil {
		data[i] = 0x22
		i++
		i = encodeVarintSafari(data, i, uint64(m.Time.Size()))
		n3, err := m.Time.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.Expires != nil {
		data[i] = 0x2a
		i++
		i = encodeVarintSafari(data, i, uint64(m.Expires.Size()))
		n4, err := m.Expires.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}

func (m *Ticket_Expiry) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Ticket_Expiry) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Encounters != 0 {
		data[i] = 0x8
		i++
		i = encodeVarintSafari(data, i, uint64(m.Encounters))
	}
	if m.Time != 0 {
		data[i] = 0x10
		i++
		i = encodeVarintSafari(data, i, uint64(m.Time))
	}
	return i, nil
}

func (m *Action) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Action) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Move != nil {
		nn5, err := m.Move.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += nn5
	}
	return i, nil
}

func (m *Action_Attack) MarshalTo(data []byte) (int, error) {
	i := 0
	data[i] = 0xa
	i++
	i = encodeVarintSafari(data, i, uint64(len(m.Attack)))
	i += copy(data[i:], m.Attack)
	return i, nil
}
func (m *Action_Item) MarshalTo(data []byte) (int, error) {
	i := 0
	data[i] = 0x12
	i++
	i = encodeVarintSafari(data, i, uint64(len(m.Item)))
	i += copy(data[i:], m.Item)
	return i, nil
}
func (m *Action_Switch) MarshalTo(data []byte) (int, error) {
	i := 0
	if m.Switch != nil {
		data[i] = 0x1a
		i++
		i = encodeVarintSafari(data, i, uint64(m.Switch.Size()))
		n6, err := m.Switch.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	return i, nil
}
func (m *Action_Run) MarshalTo(data []byte) (int, error) {
	i := 0
	data[i] = 0x20
	i++
	if m.Run {
		data[i] = 1
	} else {
		data[i] = 0
	}
	i++
	return i, nil
}
func (m *BattleMessage) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *BattleMessage) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Msg) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSafari(data, i, uint64(len(m.Msg)))
		i += copy(data[i:], m.Msg)
	}
	return i, nil
}

func (m *Zone) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Zone) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Region != 0 {
		data[i] = 0x8
		i++
		i = encodeVarintSafari(data, i, uint64(m.Region))
	}
	if m.OptCode != 0 {
		data[i] = 0x78
		i++
		i = encodeVarintSafari(data, i, uint64(m.OptCode))
	}
	return i, nil
}

func encodeFixed64Safari(data []byte, offset int, v uint64) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	data[offset+4] = uint8(v >> 32)
	data[offset+5] = uint8(v >> 40)
	data[offset+6] = uint8(v >> 48)
	data[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Safari(data []byte, offset int, v uint32) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintSafari(data []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		data[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	data[offset] = uint8(v)
	return offset + 1
}
func (m *Ticket) Size() (n int) {
	var l int
	_ = l
	l = len(m.Uid)
	if l > 0 {
		n += 1 + l + sovSafari(uint64(l))
	}
	if m.Trainer != nil {
		l = m.Trainer.Size()
		n += 1 + l + sovSafari(uint64(l))
	}
	if m.Zone != nil {
		l = m.Zone.Size()
		n += 1 + l + sovSafari(uint64(l))
	}
	if m.Time != nil {
		l = m.Time.Size()
		n += 1 + l + sovSafari(uint64(l))
	}
	if m.Expires != nil {
		l = m.Expires.Size()
		n += 1 + l + sovSafari(uint64(l))
	}
	return n
}

func (m *Ticket_Expiry) Size() (n int) {
	var l int
	_ = l
	if m.Encounters != 0 {
		n += 1 + sovSafari(uint64(m.Encounters))
	}
	if m.Time != 0 {
		n += 1 + sovSafari(uint64(m.Time))
	}
	return n
}

func (m *Action) Size() (n int) {
	var l int
	_ = l
	if m.Move != nil {
		n += m.Move.Size()
	}
	return n
}

func (m *Action_Attack) Size() (n int) {
	var l int
	_ = l
	l = len(m.Attack)
	n += 1 + l + sovSafari(uint64(l))
	return n
}
func (m *Action_Item) Size() (n int) {
	var l int
	_ = l
	l = len(m.Item)
	n += 1 + l + sovSafari(uint64(l))
	return n
}
func (m *Action_Switch) Size() (n int) {
	var l int
	_ = l
	if m.Switch != nil {
		l = m.Switch.Size()
		n += 1 + l + sovSafari(uint64(l))
	}
	return n
}
func (m *Action_Run) Size() (n int) {
	var l int
	_ = l
	n += 2
	return n
}
func (m *BattleMessage) Size() (n int) {
	var l int
	_ = l
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovSafari(uint64(l))
	}
	return n
}

func (m *Zone) Size() (n int) {
	var l int
	_ = l
	if m.Region != 0 {
		n += 1 + sovSafari(uint64(m.Region))
	}
	if m.OptCode != 0 {
		n += 1 + sovSafari(uint64(m.OptCode))
	}
	return n
}

func sovSafari(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozSafari(x uint64) (n int) {
	return sovSafari(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Ticket) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Ticket{`,
		`Uid:` + fmt.Sprintf("%v", this.Uid) + `,`,
		`Trainer:` + strings.Replace(fmt.Sprintf("%v", this.Trainer), "Trainer", "Trainer", 1) + `,`,
		`Zone:` + strings.Replace(fmt.Sprintf("%v", this.Zone), "Zone", "Zone", 1) + `,`,
		`Time:` + strings.Replace(fmt.Sprintf("%v", this.Time), "Timestamp", "Timestamp", 1) + `,`,
		`Expires:` + strings.Replace(fmt.Sprintf("%v", this.Expires), "Ticket_Expiry", "Ticket_Expiry", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Ticket_Expiry) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Ticket_Expiry{`,
		`Encounters:` + fmt.Sprintf("%v", this.Encounters) + `,`,
		`Time:` + fmt.Sprintf("%v", this.Time) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Action) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Action{`,
		`Move:` + fmt.Sprintf("%v", this.Move) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Action_Attack) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Action_Attack{`,
		`Attack:` + fmt.Sprintf("%v", this.Attack) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Action_Item) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Action_Item{`,
		`Item:` + fmt.Sprintf("%v", this.Item) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Action_Switch) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Action_Switch{`,
		`Switch:` + strings.Replace(fmt.Sprintf("%v", this.Switch), "Pokemon", "Pokemon", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Action_Run) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Action_Run{`,
		`Run:` + fmt.Sprintf("%v", this.Run) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BattleMessage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BattleMessage{`,
		`Msg:` + fmt.Sprintf("%v", this.Msg) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Zone) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Zone{`,
		`Region:` + fmt.Sprintf("%v", this.Region) + `,`,
		`OptCode:` + fmt.Sprintf("%v", this.OptCode) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringSafari(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Ticket) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSafari
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Ticket: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Ticket: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSafari
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSafari
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uid = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Trainer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSafari
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSafari
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Trainer == nil {
				m.Trainer = &Trainer{}
			}
			if err := m.Trainer.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Zone", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSafari
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSafari
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Zone == nil {
				m.Zone = &Zone{}
			}
			if err := m.Zone.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSafari
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSafari
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Time == nil {
				m.Time = &Timestamp{}
			}
			if err := m.Time.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expires", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSafari
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSafari
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Expires == nil {
				m.Expires = &Ticket_Expiry{}
			}
			if err := m.Expires.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSafari(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSafari
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Ticket_Expiry) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSafari
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Expiry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Expiry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Encounters", wireType)
			}
			m.Encounters = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSafari
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Encounters |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSafari
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Time |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSafari(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSafari
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Action) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSafari
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Action: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Action: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attack", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSafari
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSafari
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Move = &Action_Attack{string(data[iNdEx:postIndex])}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSafari
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSafari
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Move = &Action_Item{string(data[iNdEx:postIndex])}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Switch", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSafari
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSafari
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Pokemon{}
			if err := v.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Move = &Action_Switch{v}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Run", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSafari
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Move = &Action_Run{b}
		default:
			iNdEx = preIndex
			skippy, err := skipSafari(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSafari
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BattleMessage) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSafari
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BattleMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BattleMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSafari
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSafari
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSafari(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSafari
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Zone) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSafari
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Zone: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Zone: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Region", wireType)
			}
			m.Region = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSafari
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Region |= (Zone_Code(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OptCode", wireType)
			}
			m.OptCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSafari
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.OptCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSafari(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSafari
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSafari(data []byte) (n int, err error) {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSafari
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSafari
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if data[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSafari
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthSafari
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowSafari
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipSafari(data[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthSafari = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSafari   = fmt.Errorf("proto: integer overflow")
)

var fileDescriptorSafari = []byte{
	// 608 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x7c, 0x53, 0xcf, 0x6e, 0xd3, 0x4c,
	0x10, 0x8f, 0x63, 0xc7, 0x6d, 0xe6, 0xfb, 0x5a, 0xac, 0x15, 0x07, 0x63, 0x15, 0x43, 0x7d, 0xaa,
	0x04, 0xd8, 0xa5, 0x15, 0x12, 0x08, 0x2e, 0x09, 0x8a, 0x14, 0xa0, 0xd8, 0x95, 0x13, 0x38, 0xf4,
	0x82, 0x1c, 0x67, 0x9b, 0x5a, 0xa9, 0xbd, 0x96, 0xbd, 0x81, 0x94, 0xaa, 0x12, 0xe2, 0x01, 0x10,
	0x12, 0x2f, 0xc1, 0x09, 0xf1, 0x18, 0x1c, 0x23, 0x71, 0xe1, 0x48, 0x0b, 0x07, 0x8e, 0x3c, 0x02,
	0xbb, 0x6b, 0x1b, 0xd1, 0x92, 0x72, 0x98, 0xec, 0x6f, 0x66, 0x7e, 0x93, 0xf9, 0x6b, 0xf8, 0x3f,
	0x0f, 0x76, 0x83, 0x2c, 0xb2, 0xd3, 0x8c, 0x50, 0x82, 0xd0, 0x60, 0x12, 0x8e, 0xf7, 0xa6, 0x76,
	0x69, 0x7c, 0x49, 0x12, 0x6c, 0xac, 0x8c, 0x08, 0x19, 0xed, 0x63, 0x27, 0x48, 0x23, 0x27, 0x48,
	0x12, 0x42, 0x03, 0x1a, 0x91, 0x24, 0x2f, 0x22, 0x8c, 0xe5, 0x0c, 0x8f, 0xa2, 0x9c, 0x66, 0x07,
	0xa5, 0xbe, 0x94, 0x92, 0x31, 0x1e, 0xe2, 0x69, 0xa9, 0x36, 0xe3, 0x7c, 0x54, 0x40, 0xeb, 0x63,
	0x1d, 0xd4, 0x7e, 0x14, 0x8e, 0x31, 0x45, 0x1a, 0xc8, 0x93, 0x68, 0xa8, 0x4b, 0x57, 0xa5, 0xb5,
	0xa6, 0xcf, 0x21, 0xba, 0x03, 0x0b, 0x34, 0x0b, 0xa2, 0x04, 0x67, 0x7a, 0x9d, 0x59, 0xff, 0xdb,
	0xb8, 0x62, 0x9f, 0x2e, 0xe5, 0x77, 0x9a, 0x7e, 0x41, 0xf3, 0x2b, 0x3e, 0xba, 0x0e, 0x0a, 0xaf,
	0x53, 0x97, 0x45, 0x9c, 0x6e, 0xff, 0xdd, 0x82, 0xbd, 0xc3, 0x7e, 0x7c, 0xc1, 0x42, 0xeb, 0xa0,
	0xd0, 0x28, 0xc6, 0xba, 0x22, 0xd8, 0x2b, 0x67, 0xd8, 0xbc, 0xda, 0x3e, 0x73, 0xe7, 0x34, 0x88,
	0x53, 0x5f, 0x30, 0xd1, 0x5d, 0x58, 0xc0, 0xd3, 0x34, 0xca, 0x70, 0xae, 0x37, 0x44, 0xd0, 0xea,
	0xbc, 0x14, 0x45, 0x67, 0x76, 0x87, 0x33, 0x0f, 0xfc, 0x2a, 0xc2, 0xb8, 0x07, 0x6a, 0x61, 0x42,
	0x26, 0x00, 0x4e, 0x42, 0x32, 0x49, 0x28, 0xce, 0x72, 0xd1, 0x7a, 0xc3, 0xff, 0xc3, 0x82, 0x50,
	0x59, 0x18, 0x6f, 0x5f, 0x2e, 0x52, 0x5b, 0x6f, 0x24, 0x50, 0x5b, 0x21, 0x1f, 0x37, 0xd2, 0x41,
	0x0d, 0x28, 0x0d, 0xc2, 0x71, 0x31, 0xb5, 0x6e, 0xcd, 0x2f, 0x75, 0x74, 0x11, 0x94, 0x88, 0xe2,
	0x58, 0x04, 0x72, 0xbb, 0xd0, 0xd0, 0x6d, 0x50, 0xf3, 0x17, 0x11, 0x0d, 0xf7, 0xca, 0xb9, 0x98,
	0x67, 0x8a, 0xae, 0xd6, 0xb4, 0xcd, 0xde, 0x98, 0x24, 0xfc, 0xff, 0x0a, 0x3e, 0x2b, 0x44, 0xce,
	0x26, 0x89, 0x18, 0xd0, 0x22, 0x33, 0x73, 0xa5, 0xad, 0x82, 0x12, 0x93, 0xe7, 0xd8, 0x5a, 0x85,
	0xa5, 0x36, 0x4b, 0xbb, 0x8f, 0x1f, 0xe3, 0x3c, 0x0f, 0x46, 0x98, 0x6f, 0x92, 0xcd, 0xac, 0xda,
	0x24, 0x83, 0xd6, 0x07, 0x09, 0x14, 0x3e, 0x6f, 0x74, 0x0b, 0x54, 0xbe, 0x34, 0x92, 0x08, 0xef,
	0xf2, 0xc6, 0xe5, 0xf3, 0x36, 0x63, 0xdf, 0x27, 0x43, 0xec, 0x97, 0x64, 0x74, 0x09, 0x16, 0x49,
	0x4a, 0x9f, 0x85, 0xcc, 0xa6, 0x5f, 0x10, 0x53, 0x5a, 0x60, 0x3a, 0xa7, 0x58, 0x7d, 0x50, 0xf8,
	0x8b, 0x9a, 0xd0, 0x78, 0xd4, 0x72, 0xfb, 0x9e, 0x56, 0xe3, 0xf0, 0xa1, 0xd7, 0x65, 0x50, 0xe2,
	0xb0, 0xeb, 0x75, 0x5c, 0x57, 0xab, 0x23, 0x00, 0xb5, 0xf7, 0xc0, 0x75, 0xbd, 0xae, 0x26, 0x73,
	0xf3, 0x13, 0xd7, 0x7b, 0xda, 0xd2, 0x94, 0x22, 0x6e, 0xcb, 0xeb, 0x69, 0x0d, 0x0e, 0x19, 0xda,
	0x6a, 0x69, 0xea, 0xc6, 0x8c, 0x0d, 0xb9, 0x27, 0x4a, 0x42, 0x14, 0x1a, 0x1d, 0xbe, 0x0d, 0x64,
	0x9c, 0xbf, 0x62, 0xe3, 0x1f, 0x3e, 0x6b, 0xf3, 0xf5, 0xe7, 0xef, 0xef, 0xea, 0x37, 0xd0, 0x35,
	0xa7, 0xbc, 0x4e, 0xe7, 0xb0, 0x04, 0x36, 0xbb, 0xf2, 0x23, 0x87, 0x73, 0x9d, 0x43, 0x11, 0x51,
	0x35, 0x79, 0x84, 0xb6, 0xa1, 0xd9, 0xa9, 0xee, 0x60, 0x7e, 0xe6, 0xe2, 0x06, 0x8c, 0xb9, 0x87,
	0x77, 0x6a, 0x1f, 0x56, 0x6d, 0x4d, 0x5a, 0x97, 0xda, 0x37, 0x67, 0xc7, 0x66, 0xed, 0x0b, 0x93,
	0x9f, 0xc7, 0xa6, 0xf4, 0xea, 0xc4, 0x94, 0xde, 0x33, 0xf9, 0xc4, 0x64, 0xc6, 0xe4, 0x2b, 0x93,
	0x1f, 0x27, 0xcc, 0xc7, 0xde, 0xb7, 0xdf, 0xcc, 0xda, 0x8e, 0x9c, 0x0e, 0x76, 0x07, 0xaa, 0xf8,
	0x48, 0x37, 0x7f, 0x05, 0x00, 0x00, 0xff, 0xff, 0x89, 0x3e, 0xab, 0x30, 0x10, 0x04, 0x00, 0x00,
}
