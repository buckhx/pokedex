// Code generated by protoc-gen-gogo.
// source: entity.proto
// DO NOT EDIT!

/*
	Package pbf is a generated protocol buffer package.

	It is generated from these files:
		entity.proto
		msg.proto
		pokedex.proto
		registry.proto
		zone.proto

	It has these top-level messages:
		Trainer
		Timestamp
		Response
		Pokemon
		Token
		Event
		Region
*/
package pbf

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import strconv "strconv"

import strings "strings"
import github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"
import sort "sort"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.GoGoProtoPackageIsVersion1

type Trainer_Gender int32

const (
	BOY  Trainer_Gender = 0
	GIRL Trainer_Gender = 1
)

var Trainer_Gender_name = map[int32]string{
	0: "BOY",
	1: "GIRL",
}
var Trainer_Gender_value = map[string]int32{
	"BOY":  0,
	"GIRL": 1,
}

func (Trainer_Gender) EnumDescriptor() ([]byte, []int) { return fileDescriptorEntity, []int{0, 0} }

type Trainer struct {
	Uid      string              `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Name     string              `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Password string              `protobuf:"bytes,3,opt,name=password,proto3" json:"password,omitempty"`
	Age      int32               `protobuf:"varint,4,opt,name=age,proto3" json:"age,omitempty"`
	Gender   Trainer_Gender      `protobuf:"varint,5,opt,name=gender,proto3,enum=buckhx.safari.entity.Trainer_Gender" json:"gender,omitempty"`
	Start    *Timestamp          `protobuf:"bytes,6,opt,name=start" json:"start,omitempty"`
	Pc       *Pokemon_Collection `protobuf:"bytes,7,opt,name=pc" json:"pc,omitempty"`
}

func (m *Trainer) Reset()                    { *m = Trainer{} }
func (*Trainer) ProtoMessage()               {}
func (*Trainer) Descriptor() ([]byte, []int) { return fileDescriptorEntity, []int{0} }

func (m *Trainer) GetStart() *Timestamp {
	if m != nil {
		return m.Start
	}
	return nil
}

func (m *Trainer) GetPc() *Pokemon_Collection {
	if m != nil {
		return m.Pc
	}
	return nil
}

func init() {
	proto.RegisterType((*Trainer)(nil), "buckhx.safari.entity.Trainer")
	proto.RegisterEnum("buckhx.safari.entity.Trainer_Gender", Trainer_Gender_name, Trainer_Gender_value)
}
func (x Trainer_Gender) String() string {
	s, ok := Trainer_Gender_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *Trainer) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Trainer)
	if !ok {
		that2, ok := that.(Trainer)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Uid != that1.Uid {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Password != that1.Password {
		return false
	}
	if this.Age != that1.Age {
		return false
	}
	if this.Gender != that1.Gender {
		return false
	}
	if !this.Start.Equal(that1.Start) {
		return false
	}
	if !this.Pc.Equal(that1.Pc) {
		return false
	}
	return true
}
func (this *Trainer) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&pbf.Trainer{")
	s = append(s, "Uid: "+fmt.Sprintf("%#v", this.Uid)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Password: "+fmt.Sprintf("%#v", this.Password)+",\n")
	s = append(s, "Age: "+fmt.Sprintf("%#v", this.Age)+",\n")
	s = append(s, "Gender: "+fmt.Sprintf("%#v", this.Gender)+",\n")
	if this.Start != nil {
		s = append(s, "Start: "+fmt.Sprintf("%#v", this.Start)+",\n")
	}
	if this.Pc != nil {
		s = append(s, "Pc: "+fmt.Sprintf("%#v", this.Pc)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringEntity(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func extensionToGoStringEntity(e map[int32]github_com_gogo_protobuf_proto.Extension) string {
	if e == nil {
		return "nil"
	}
	s := "map[int32]proto.Extension{"
	keys := make([]int, 0, len(e))
	for k := range e {
		keys = append(keys, int(k))
	}
	sort.Ints(keys)
	ss := []string{}
	for _, k := range keys {
		ss = append(ss, strconv.Itoa(k)+": "+e[int32(k)].GoString())
	}
	s += strings.Join(ss, ",") + "}"
	return s
}
func (m *Trainer) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Trainer) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Uid) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintEntity(data, i, uint64(len(m.Uid)))
		i += copy(data[i:], m.Uid)
	}
	if len(m.Name) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintEntity(data, i, uint64(len(m.Name)))
		i += copy(data[i:], m.Name)
	}
	if len(m.Password) > 0 {
		data[i] = 0x1a
		i++
		i = encodeVarintEntity(data, i, uint64(len(m.Password)))
		i += copy(data[i:], m.Password)
	}
	if m.Age != 0 {
		data[i] = 0x20
		i++
		i = encodeVarintEntity(data, i, uint64(m.Age))
	}
	if m.Gender != 0 {
		data[i] = 0x28
		i++
		i = encodeVarintEntity(data, i, uint64(m.Gender))
	}
	if m.Start != nil {
		data[i] = 0x32
		i++
		i = encodeVarintEntity(data, i, uint64(m.Start.Size()))
		n1, err := m.Start.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.Pc != nil {
		data[i] = 0x3a
		i++
		i = encodeVarintEntity(data, i, uint64(m.Pc.Size()))
		n2, err := m.Pc.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func encodeFixed64Entity(data []byte, offset int, v uint64) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	data[offset+4] = uint8(v >> 32)
	data[offset+5] = uint8(v >> 40)
	data[offset+6] = uint8(v >> 48)
	data[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Entity(data []byte, offset int, v uint32) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintEntity(data []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		data[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	data[offset] = uint8(v)
	return offset + 1
}
func (m *Trainer) Size() (n int) {
	var l int
	_ = l
	l = len(m.Uid)
	if l > 0 {
		n += 1 + l + sovEntity(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovEntity(uint64(l))
	}
	l = len(m.Password)
	if l > 0 {
		n += 1 + l + sovEntity(uint64(l))
	}
	if m.Age != 0 {
		n += 1 + sovEntity(uint64(m.Age))
	}
	if m.Gender != 0 {
		n += 1 + sovEntity(uint64(m.Gender))
	}
	if m.Start != nil {
		l = m.Start.Size()
		n += 1 + l + sovEntity(uint64(l))
	}
	if m.Pc != nil {
		l = m.Pc.Size()
		n += 1 + l + sovEntity(uint64(l))
	}
	return n
}

func sovEntity(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozEntity(x uint64) (n int) {
	return sovEntity(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Trainer) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Trainer{`,
		`Uid:` + fmt.Sprintf("%v", this.Uid) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Password:` + fmt.Sprintf("%v", this.Password) + `,`,
		`Age:` + fmt.Sprintf("%v", this.Age) + `,`,
		`Gender:` + fmt.Sprintf("%v", this.Gender) + `,`,
		`Start:` + strings.Replace(fmt.Sprintf("%v", this.Start), "Timestamp", "Timestamp", 1) + `,`,
		`Pc:` + strings.Replace(fmt.Sprintf("%v", this.Pc), "Pokemon_Collection", "Pokemon_Collection", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringEntity(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Trainer) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEntity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Trainer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Trainer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uid = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Password", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Password = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Age", wireType)
			}
			m.Age = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Age |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gender", wireType)
			}
			m.Gender = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Gender |= (Trainer_Gender(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Start", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Start == nil {
				m.Start = &Timestamp{}
			}
			if err := m.Start.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pc", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pc == nil {
				m.Pc = &Pokemon_Collection{}
			}
			if err := m.Pc.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEntity(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEntity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEntity(data []byte) (n int, err error) {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEntity
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if data[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthEntity
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowEntity
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipEntity(data[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthEntity = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEntity   = fmt.Errorf("proto: integer overflow")
)

var fileDescriptorEntity = []byte{
	// 316 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xe2, 0x49, 0xcd, 0x2b, 0xc9,
	0x2c, 0xa9, 0xd4, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x12, 0x49, 0x2a, 0x4d, 0xce, 0xce, 0xa8,
	0xd0, 0x2b, 0x4e, 0x4c, 0x4b, 0x2c, 0xca, 0xd4, 0x83, 0xc8, 0x49, 0xf1, 0x16, 0xe4, 0x67, 0xa7,
	0xa6, 0xa4, 0x56, 0x40, 0x14, 0x49, 0x71, 0xe6, 0x16, 0xa7, 0x43, 0x98, 0x4a, 0xcb, 0x99, 0xb8,
	0xd8, 0x43, 0x8a, 0x12, 0x33, 0xf3, 0x52, 0x8b, 0x84, 0x04, 0xb8, 0x98, 0x4b, 0x33, 0x53, 0x24,
	0x18, 0x15, 0x18, 0x35, 0x38, 0x83, 0x40, 0x4c, 0x21, 0x21, 0x2e, 0x96, 0xbc, 0xc4, 0xdc, 0x54,
	0x09, 0x26, 0xb0, 0x10, 0x98, 0x2d, 0x24, 0xc5, 0xc5, 0x51, 0x90, 0x58, 0x5c, 0x5c, 0x9e, 0x5f,
	0x94, 0x22, 0xc1, 0x0c, 0x16, 0x87, 0xf3, 0x41, 0x26, 0x24, 0xa6, 0xa7, 0x4a, 0xb0, 0x00, 0x85,
	0x59, 0x83, 0x40, 0x4c, 0x21, 0x1b, 0x2e, 0xb6, 0xf4, 0xd4, 0xbc, 0x94, 0xd4, 0x22, 0x09, 0x56,
	0xa0, 0x20, 0x9f, 0x91, 0x8a, 0x1e, 0x36, 0x07, 0xea, 0x41, 0x9d, 0xa0, 0xe7, 0x0e, 0x56, 0x1b,
	0x04, 0xd5, 0x23, 0x64, 0xc4, 0xc5, 0x5a, 0x5c, 0x92, 0x58, 0x54, 0x22, 0xc1, 0x06, 0xd4, 0xcc,
	0x6d, 0x24, 0x83, 0xa6, 0x19, 0xe4, 0x8d, 0x90, 0xcc, 0xdc, 0x54, 0xa0, 0x9a, 0xdc, 0x82, 0x20,
	0x88, 0x52, 0x21, 0x4b, 0x2e, 0xa6, 0x82, 0x64, 0x09, 0x76, 0xb0, 0x06, 0x4d, 0x34, 0x0d, 0xb0,
	0x60, 0x08, 0x00, 0xd2, 0xb9, 0xf9, 0x79, 0x7a, 0xce, 0xf9, 0x39, 0x39, 0xa9, 0xc9, 0x25, 0x99,
	0xf9, 0x79, 0x41, 0x40, 0x4d, 0x4a, 0xd2, 0x5c, 0x6c, 0x10, 0x07, 0x08, 0xb1, 0x73, 0x31, 0x3b,
	0xf9, 0x47, 0x0a, 0x30, 0x08, 0x71, 0x70, 0xb1, 0xb8, 0x7b, 0x06, 0xf9, 0x08, 0x30, 0x3a, 0x19,
	0x5e, 0x78, 0x28, 0xc7, 0x70, 0x03, 0x88, 0x3f, 0x3c, 0x94, 0x63, 0x6c, 0x78, 0x24, 0xc7, 0xb8,
	0x02, 0x88, 0x4f, 0x00, 0xf1, 0x05, 0x20, 0x7e, 0x00, 0xc4, 0x2f, 0x1e, 0x01, 0xe5, 0x80, 0xf4,
	0x84, 0xc7, 0x72, 0x0c, 0x51, 0xcc, 0x05, 0x49, 0x69, 0x49, 0x6c, 0xe0, 0x30, 0x36, 0x06, 0x04,
	0x00, 0x00, 0xff, 0xff, 0x18, 0xaf, 0x91, 0x0c, 0xa3, 0x01, 0x00, 0x00,
}
