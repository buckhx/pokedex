syntax = "proto3";

package buckhx.safari.registry;
option go_package = "pbf";

import "google/api/annotations.proto";
import "pokedex.proto";
import "entity.proto";
import "zone.proto";
import "msg.proto";

// Registry is a service to register trainers
service Registry {
	// Register makes a creates a new trainer in the safari
	//
	// Trainer name, password, age & gender are required. 
	// Any other supplied fields will be ignored
	rpc Register (entity.Trainer) returns (msg.Response) {
		option (google.api.http) = {
			post: "/trainer"
			body: "*"
		};
	}

	// Get fetchs a trainer
	//
	// The populated fields will depend on the auth scope of the token
	rpc Get (entity.Trainer) returns (entity.Trainer) {
		option (google.api.http) = {
			get: "/trainer/{uid}"
		};
	}

	// Enter authenticates a user to retrieve a an access token to authorize requests for a safari
	//
	// HTTPS required w/ HTTP basic access authentication via a header
	// Authorization: Basic BASE64({user:pass})
	rpc Enter (entity.Trainer) returns (Token) {
		option (google.api.http) = {
			get: "/trainer/{uid}/auth"
		};
	}
}

// IRL Scopes would live in different go packages and not need to be prefixed
enum RegistryScope {
	CIVILIAN = 0;
	TRAINER = 1;
	GYM_LEADER = 2;
	ELITE_FOUR = 3;
	PROFESSOR = 4;
}

message Token {
	bytes token = 1;
	Type type = 2;
	enum Type {
		ACCESS = 0;
	}
	message Scopes {
		RegistryScope registry = 1;
		pokedex.PokedexScope pokedex = 2;
		zone.ZoneScope zone = 3;
		// Since these are all in the same go pkg, we have to avoid name collisions
		// IRL these service would live in different packages
	}
}
