// Code generated by protoc-gen-go.
// source: pokedex.proto
// DO NOT EDIT!

/*
Package srv is a generated protocol buffer package.

It is generated from these files:
	pokedex.proto

It has these top-level messages:
	PokemonQuery
	Pokemon
*/
package srv

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type PokemonQuery struct {
	ID int32 `protobuf:"varint,1,opt,name=ID,json=iD" json:"ID,omitempty"`
}

func (m *PokemonQuery) Reset()                    { *m = PokemonQuery{} }
func (m *PokemonQuery) String() string            { return proto.CompactTextString(m) }
func (*PokemonQuery) ProtoMessage()               {}
func (*PokemonQuery) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Pokemon struct {
	ID   int32  `protobuf:"varint,1,opt,name=ID,json=iD" json:"ID,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=Name,json=name" json:"Name,omitempty"`
}

func (m *Pokemon) Reset()                    { *m = Pokemon{} }
func (m *Pokemon) String() string            { return proto.CompactTextString(m) }
func (*Pokemon) ProtoMessage()               {}
func (*Pokemon) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func init() {
	proto.RegisterType((*PokemonQuery)(nil), "srv.PokemonQuery")
	proto.RegisterType((*Pokemon)(nil), "srv.Pokemon")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for Pokedex service

type PokedexClient interface {
	GetPokemon(ctx context.Context, in *PokemonQuery, opts ...grpc.CallOption) (*Pokemon, error)
}

type pokedexClient struct {
	cc *grpc.ClientConn
}

func NewPokedexClient(cc *grpc.ClientConn) PokedexClient {
	return &pokedexClient{cc}
}

func (c *pokedexClient) GetPokemon(ctx context.Context, in *PokemonQuery, opts ...grpc.CallOption) (*Pokemon, error) {
	out := new(Pokemon)
	err := grpc.Invoke(ctx, "/srv.Pokedex/GetPokemon", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Pokedex service

type PokedexServer interface {
	GetPokemon(context.Context, *PokemonQuery) (*Pokemon, error)
}

func RegisterPokedexServer(s *grpc.Server, srv PokedexServer) {
	s.RegisterService(&_Pokedex_serviceDesc, srv)
}

func _Pokedex_GetPokemon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PokemonQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PokedexServer).GetPokemon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/srv.Pokedex/GetPokemon",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PokedexServer).GetPokemon(ctx, req.(*PokemonQuery))
	}
	return interceptor(ctx, in, info, handler)
}

var _Pokedex_serviceDesc = grpc.ServiceDesc{
	ServiceName: "srv.Pokedex",
	HandlerType: (*PokedexServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPokemon",
			Handler:    _Pokedex_GetPokemon_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor0,
}

func init() { proto.RegisterFile("pokedex.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 134 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xe2, 0x2d, 0xc8, 0xcf, 0x4e,
	0x4d, 0x49, 0xad, 0xd0, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2e, 0x2e, 0x2a, 0x53, 0x92,
	0xe3, 0xe2, 0x09, 0x00, 0x8a, 0xe6, 0xe6, 0xe7, 0x05, 0x96, 0xa6, 0x16, 0x55, 0x0a, 0xf1, 0x71,
	0x31, 0x79, 0xba, 0x48, 0x30, 0x2a, 0x30, 0x6a, 0xb0, 0x06, 0x31, 0x65, 0xba, 0x28, 0xe9, 0x72,
	0xb1, 0x43, 0xe5, 0xd1, 0xa5, 0x84, 0x84, 0xb8, 0x58, 0xfc, 0x12, 0x73, 0x53, 0x25, 0x98, 0x80,
	0x22, 0x9c, 0x41, 0x2c, 0x79, 0x40, 0xb6, 0x91, 0x15, 0x44, 0x39, 0xd0, 0x12, 0x21, 0x7d, 0x2e,
	0x2e, 0xf7, 0xd4, 0x12, 0x98, 0x66, 0x41, 0x3d, 0xa0, 0x6d, 0x7a, 0xc8, 0x56, 0x49, 0xf1, 0x20,
	0x0b, 0x29, 0x31, 0x24, 0xb1, 0x81, 0x9d, 0x65, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0x7b, 0xba,
	0x03, 0x18, 0xa7, 0x00, 0x00, 0x00,
}
